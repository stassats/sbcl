(
(#(1EE7DBF0 45DA68C6 720BA130 831C0B63 9100CEE7 DC5C890A)
 "#(COMPILATION-SPEED DEBUG SAFETY SPACE SPEED INHIBIT-WARNINGS)"
 "(  (& (- val (>> val 14)) 7))")
(#(50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "#(EQ EQL EQUAL EQUALP)"
 "(  (& (>> val 19) 3) )")
(#(3C5A72CA 42CFF1D7 50A623EF 5545367C 57ED033B 886D78E6 9ABE6FD6 A82C3140 AFB09C7B C15E0DAC DA3A52C4 DB03D182 EA7496BF)
 "#(:REQUIRED &OPTIONAL &REST &MORE &KEY &AUX &ENVIRONMENT &WHOLE &ALLOW-OTHER-KEYS &BODY :POST-ENV :POST-REST :POST-MORE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 8 1 0 5 0 1)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 205367CA 2341D8DB 46CC6774 47991116 5597FB3D 5CDDC111 711BEFAB 728F28C5 74748736 965CD62A A0FAB3A5 A2E1D524
   A7E15D52 B734105A C3127E24)
 "#(SB-ALIEN::ROOT INTEGER BOOLEAN ENUM FLOAT SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER ALIEN-VALUE SB-ALIEN::POINTER SB-ALIEN::MEM-BLOCK ARRAY SB-ALIEN::RECORD SB-ALIEN::FUN VALUES C-STRING)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 12 0 0 14 13 12 2)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 3539E037 763F1FFB 965CD62A A0FAB3A5 AC7D417F B6EC8FEB E0A39FB8 FEAFF6CF)
 "#(FIXNUM SINGLE-FLOAT DOUBLE-FLOAT INTEGER SB-VM:SIGNED-WORD WORD BIGNUM COMPLEX RATIO)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 0 5 0 13 3 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(790E4AF 73E1E633 8E8B60F0 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "#(:INCLUDE :INITIAL-OFFSET :PURE :TYPE :CONC-NAME :COPIER :PREDICATE :PRINT-FUNCTION :PRINT-OBJECT)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 5 0 2 3 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(361A9014 52F791B3 6F0EE5C6 73F613A5 7D4A95EE 97D2B0EE D7B9C71F F17EF241 FAE5FDA6)
 "#(:ABSOLUTE :COND-BRANCH :UNCOND-BRANCH :LAYOUT-ID :UBFM-IMMS :PC-RELATIVE :PC-RELATIVE-LDR-STR :LDR-STR :MOVE-WIDE)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 3 5 3 2)))
  (let ((b (& (>> val 22) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(19A804F1 3D6712AB 42354AFF 511F123D 52F791B3 8AFF6C0B B6C53C5B C085651F C4F3111F CB28EF79 CB2A2A51 E7BDDEAC EED915AA
   F1366560 FB4D653B)
 "#(:ASSEMBLY-ROUTINE :ASSEMBLY-ROUTINE* :CARD-TABLE-INDEX-MASK :SYMBOL-TLS-INDEX :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :LAYOUT :IMMOBILE-SYMBOL :FDEFN-CALL :STATIC-CALL :SYMBOL-VALUE :LAYOUT-ID)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 14 13 8)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(7AB68FF5 B15ADCA9 CFEE5049 D3801745 F458B829)
 "#(:BINDS :CALLS :SETS :REFERENCES :MACROEXPANDS)"
 "(  (& (+ (>> val 2) (>> val 16)) 7))")
(#(54FC85B 17D252E7 377D1CA8 519DD3CE 6E2BAD2D 7614C426 BDE3EA38 D52CECC7)
 "#(:UNKNOWN-RETURN :KNOWN-RETURN :INTERNAL-ERROR :NON-LOCAL-EXIT :BLOCK-START :CALL-SITE :SINGLE-VALUE-RETURN :NON-LOCAL-ENTRY)"
 "(  (& (^ (>> val 2) (>> val 12)) 7))")
(#(1A301372 3052A89D 473C74AB 48FBACAC 4DA6DC6C 55F6D36B 77777223 82C86917 9F4505D4 A4454CA7 A647599C B2C4B33F BD0E4352
   C35F4DD7 C8A25DB2 D99277C8 EB1E2C6C)
 "#(T SB-VM:*CURRENT-CATCH-BLOCK* SB-VM::*CURRENT-UNWIND-PROTECT-BLOCK* SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-THREAD::*STARTING-THREADS* SB-VM::*FREE-TLS-INDEX* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ *GC-EPOCH* %%DATA-VECTOR-REFFERS%% SB-VM::%%DATA-VECTOR-REFFERS/CHECK-BOUNDS%% %%DATA-VECTOR-SETTERS%% SB-VM::%%DATA-VECTOR-SETTERS/CHECK-BOUNDS%%)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 1 0 11 0 0 12 0 0 0 12 0 13 0 22)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 1BB39CAB 22FDA262 25C512C8 305A3B6B 33893B8A 34338FFE 36006C21 37B7B1E3 441D6918 49C8CDB2 50EDFBF1 58FAED48
   5E1281A1 5F91445F 630C4B59 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3 8471EF8C 8DB01467 95785927 96254BD9
   9B67B3CC A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F D9F0FE17 E5F32E85 E8DC3557 E9A6A6C4
   FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP ENTER-ALIEN-CALLBACK SB-THREAD::ENTER-FOREIGN-CALLBACK TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 15 0 9 0 10 36 0 0 0 0 0 19 32 0 0 1 36 0 0 0 28 5 16 10 13 51 60 0 12 0 0 46)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(15BC6795 3A0738E7 7A38389C EED2914F)
 "#(:B :H :S :D)"
 "(  (& (>> val 3) 3) )")
(#(361A9014 3BBB9B76 B9D1FD7E E682238B F2861886)
 "#(:ABSOLUTE :I-TYPE :S-TYPE :U-TYPE :U+I-TYPE)"
 "(  (& (^ (>> val 3) (>> val 9)) 7))")
(#(1F2853E0 3052A89D 473C74AB 48FBACAC 4DA6DC6C 55F6D36B 77777223 82C86917 9F4505D4 A4454CA7 A647599C AEAE7163 B2C4B33F
   BD0E4352 C35F4DD7 C8A25DB2 EB1E2C6C)
 "#(T SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-THREAD::*STARTING-THREADS* SB-VM::*FREE-TLS-INDEX* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ *GC-EPOCH* %%DATA-VECTOR-REFFERS%% SB-VM::%%DATA-VECTOR-REFFERS/CHECK-BOUNDS%% %%DATA-VECTOR-SETTERS%% SB-VM::%%DATA-VECTOR-SETTERS/CHECK-BOUNDS%% SB-VM::CALL-INTO-LISP SB-VM::DO-PENDING-INTERRUPT)"
 "((let ((tab #a((16) (unsigned-byte 8) 6 0 11 1 1 0 0 3 0 0 0 15 0 14 0 22)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 1BB39CAB 22FDA262 25C512C8 305A3B6B 33893B8A 34338FFE 36006C21 37B7B1E3 441D6918 49C8CDB2 50EDFBF1 58FAED48
   5E1281A1 5F91445F 630C4B59 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3 8471EF8C 8DB01467 95785927 96254BD9
   9B67B3CC A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F D9F0FE17 E5D7EC7D E5F32E85 E8DC3557
   E9A6A6C4 FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR UNDEFINED-ALIEN-FUN-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP ENTER-ALIEN-CALLBACK SB-THREAD::ENTER-FOREIGN-CALLBACK TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 28 0 12 0 9 36 0 0 0 0 0 19 32 0 0 46 36 0 0 0 12 5 16 16 0 51 15 0 12 0 55 12)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(A6BE71B 1816EA31 3146F72B 4F02F520 55E45869 741F3223 B5451A4C D463BE7A)
 "#(:RNE :RTZ :RDN :RUP :RMM :UNUSED1 :UNUSED2 :DYNAMIC)"
 "(  (& (+ (>> val 4) (>> val 23)) 7))")
(#(2A9B425 B9C768B 136B97E3 590BA280 6FED881E 7685F9E6 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C C290A84A DB2BD6D1 E0307D49
   E26011AD E94E5DF8 EAB7029E F84A6B24)
 "#(((:TYPE VALUES-TYPE)) ((:TYPE FUN-DESIGNATOR-TYPE) (:TYPE FUN-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)) ((:TYPE ALIEN-TYPE-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 0 0 0 13 31 0 14 1 13 30 13 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C C290A84A E0307D49 E26011AD
   E94E5DF8 EAB7029E F84A6B24)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE) (:TYPE SIMD-PACK-256-TYPE) (:TYPE SIMD-PACK-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE MEMBER-TYPE) (:TYPE NUMERIC-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 1 12 0 11 0 13 30 13 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(1781B8EE 19FC6384 1A0F727C 250AE08D 3F7330C3 4C54776F 54AEC8F6 838A43D8 911225B2 965775F0 96D8153C B25F4091 B6A0A504
   C45D8E9C E5A64CEF)
 "#(((:TYPE ALIEN-BOOLEAN-TYPE) (:TYPE ALIEN-ENUM-TYPE) (:TYPE ALIEN-INTEGER-TYPE)) ((:TYPE ALIEN-SINGLE-FLOAT-TYPE) (:TYPE ALIEN-DOUBLE-FLOAT-TYPE) (:TYPE ALIEN-FLOAT-TYPE)) ((:TYPE ALIEN-RECORD-TYPE)) ((:TYPE ALIEN-ARRAY-TYPE)) ((:TYPE SB-ALIEN::ALIEN-C-STRING-TYPE)) ((:TYPE ALIEN-POINTER-TYPE)) ((:TYPE ALIEN-FUN-TYPE)) ((:TYPE SB-ALIEN::ALIEN-ALIEN-VALUE-TYPE) (:TYPE SB-ALIEN::ALIEN-MEM-BLOCK-TYPE) (:TYPE SB-ALIEN::ALIEN-SYSTEM-AREA-POINTER-TYPE)) ((:TYPE ALIEN-VALUES-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 14 0 0 12 4 12)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 DB2BD6D1 E0307D49 E26011AD EAB7029E)
 "#(((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 1 14 0 5 0 0 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 350770A3 590BA280 5F5FC85C 65A7B3D6 6FED881E 7685F9E6 76DE51BF 92FBC223 9765C8E7 9A16AFFB
   9ED11C51 A6E24C79 B35D548C C290A84A C76C711E DB2BD6D1 E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A
   FCA25B62)
 "#(((:TYPE NUMERIC-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE NAMED-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE BUILT-IN-CLASSOID)) ((:TYPE FUN-DESIGNATOR-TYPE)) ((:TYPE FUN-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CONSTANT-TYPE) (:TYPE VALUES-TYPE) (:TYPE ARGS-TYPE) (:TYPE UNKNOWN-TYPE) (:TYPE NEGATION-TYPE) (:TYPE ALIEN-TYPE-TYPE) (:TYPE HAIRY-TYPE) (:TYPE COMPOUND-TYPE) (:TYPE CTYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 31 0 16 13 0 0 18 0 11 0 0 13 17 10 25 31)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(361A9014 4D9F74B8 AAA32BC0)
 "#(:ABS32 :REL32 :ABSOLUTE)"
 "(  (>> val 30) )")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C40838B8 C888E122 D2205031 D37E3DCA DB3125F9
   DE352140)
 "#(((:TYPE SB-C::CDYNAMIC-EXTENT) (:TYPE SB-C::COMBINATION) (:TYPE SB-C::ENCLOSE) (:TYPE EXIT) (:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::ENTRY) (:TYPE SB-C::CIF) (:TYPE SB-C::CRETURN)) ((:TYPE SB-C::REF)) ((:TYPE SB-C::CSET)) ((:TYPE BIND)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 15 8 13 0 5 11 0)))
  (let ((b (& (>> val 20) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D 8A6265B8 B313FB62 C40838B8 C888E122 D2205031 D37E3DCA DB3125F9 DE352140 FCD93907)
 "#(((:TYPE BIND) (:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::CRETURN)) ((:TYPE EXIT)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 8 0 0 0 10 6)))
  (let ((b (& (>> val 16) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C40838B8 C888E122 D2205031 D37E3DCA DB3125F9
   DE352140 FCD93907)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE BIND)) ((:TYPE EXIT)) ((:TYPE SB-C::ENTRY)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::ENCLOSE)) ((:TYPE SB-C::CDYNAMIC-EXTENT)))"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 15 5 9 6)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D B313FB62 C40838B8 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 0 11 5 0 2)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 714D6B00 B313FB62 C40838B8 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 2 3 0 7 6 5)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(1E214301 43E6A03E 48AF4A42 7168FDB3 96565735 BE92D34F EBCF9692)
 "#(((:TYPE SB-C::CLAMBDA) (:TYPE SB-C::OPTIONAL-DISPATCH) (:TYPE SB-C::FUNCTIONAL) (:TYPE CONSTANT)) ((:TYPE SB-C::LAMBDA-VAR)) ((:TYPE SB-C::DEFINED-FUN)) ((:TYPE SB-C::GLOBAL-VAR)))"
 "(  (& (+ (>> val 2) (>> val 15)) 7))")
(#(714D6B00 8A6265B8 B313FB62 C40838B8 C888E122 D2205031 DB3125F9 DE352140)
 "#(((:TYPE BIND)) ((:TYPE SB-C::REF)) ((:TYPE DELAY) (:TYPE SB-C::BOUND-CAST) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::COMBINATION)))"
 "(  (& (- val (>> val 9)) 7))")
(#(3052A89D 473C74AB 48FBACAC 4DA6DC6C 55F6D36B 5B322558 76A4B4DA 77777223 82C86917 9F4505D4 A4454CA7 A647599C B2C4B33F
   BD0E4352 C35F4DD7 C8A25DB2 EB1E2C6C)
 "#(T SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-THREAD::*STARTING-THREADS* SB-VM::*FREE-TLS-INDEX* SB-APROF::*N-PROFILE-SITES* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ *GC-EPOCH* %%DATA-VECTOR-REFFERS%% SB-VM::%%DATA-VECTOR-REFFERS/CHECK-BOUNDS%% %%DATA-VECTOR-SETTERS%% SB-VM::%%DATA-VECTOR-SETTERS/CHECK-BOUNDS%% SB-VM::*CPU-FEATURE-BITS*)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 3 15 9 0 0 3 7 0 21 3 0 13 0 6)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 1BB39CAB 22FDA262 25590E5A 25C512C8 305A3B6B 33893B8A 34338FFE 358752D0 36006C21 37B7B1E3 40BFD439 441D6918
   49C8CDB2 50EDFBF1 58FAED48 5E1281A1 5F91445F 630C4B59 65610EB4 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3
   8471EF8C 8DB01467 95785927 96254BD9 9B67B3CC A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F
   D9F0FE17 E5F32E85 E8DC3557 E9A6A6C4 FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP HANDLE-WIN32-EXCEPTION SB-THREAD::RUN-INTERRUPTION ENTER-ALIEN-CALLBACK SB-THREAD::ENTER-FOREIGN-CALLBACK SB-IMPL::INSTALL-HASH-TABLE-LOCK UPDATE-OBJECT-LAYOUT TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 16 0 9 0 10 36 0 0 6 0 0 19 36 0 0 46 36 0 0 0 34 5 16 49 57 51 9 0 10 0 0 6)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(64688A38 B690AE2E D1146057 E0A39FB8)
 "#(:QWORD :DWORD :WORD :BYTE)"
 "(  (& (- val (>> val 7)) 3) )")
(#(4CD4B181 57A4C8AB 59A85626 61C0A71B 6C16ABD3 B5558FF2 DCF9423A F4569369)
 "#(:EQ :LT :LE :UNORD :NEQ :NLT :NLE :ORD)"
 "(  (& (+ (>> val 2) (>> val 31)) 7))")
(#(2C90A766 4499E855 61F4228E 76DB0CD0)
 "#(:NTA :T0 :T1 :T2)"
 "(  (& (>> val 9) 3) )")
(#(B0CCF3A BACE279 161EF39E 22F0D544 29031807 4CD4B181 57A4C8AB 59A85626 5BCC1739 5C8F1654 61C0A71B 635CAD88 6640EC20 6C16ABD3
   70394B64 75080932 773A9B54 7A148738 7BEB14F8 7EC5A1CE 926D9EB5 92A0A36A A8BB79A8 A8BE1B93 B5558FF2 B5CE1611 BE665566
   BF709B2B DCF9423A F4569369 FB387BEC FCF00468)
 "#(:EQ :LT :LE :UNORD :NEQ :NLT :NLE :ORD :EQ_UQ :NGE :NGT :FALSE :NEQ_OQ :GE :GT :TRUE :EQ_OS :LT_OQ :LE_OQ :UNORD_S :NEQ_US :NLT_UQ :NLE_UQ :ORD_S :EQ_US :NGE_UQ :NGT_UQ :FALSE_OS :NEQ_OS :GE_OQ :GT_OQ :TRUE_US)"
 "((let ((tab #a((16) (unsigned-byte 8) 1 21 21 12 15 31 19 9 0 27 31 31 4 0 4 0)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 590BA280 5F5FC85C 65A7B3D6 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C76C711E E94E5DF8 F84A6B24 FA751134
   FBD5DA6A FCA25B62)
 "#(((:TYPE MEMBER-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CHARACTER-SET-TYPE) (:TYPE ARRAY-TYPE) (:TYPE NUMERIC-TYPE) (:TYPE CONS-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 13 4 15 12 0 0 15 0)))
  (let ((b (& (>> val 27) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 136B97E3 1DF6628B 590BA280 5F5FC85C 65A7B3D6 6FED881E 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C290A84A
   C76C711E E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE SIMD-PACK-TYPE)) ((:TYPE SIMD-PACK-256-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 13 12 16 31 0 0 0 0 0 0 21 30 7 16 27 13)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(874B4BCB B6F3711F B8A52F9F BBCCDE6E CB85BF00)
 "#(((:TYPE SB-PRETTY::NEWLINE)) ((:TYPE SB-PRETTY::INDENTATION)) ((:TYPE SB-PRETTY::BLOCK-START)) ((:TYPE SB-PRETTY::BLOCK-END)) ((:TYPE SB-PRETTY::TAB)))"
 "(  (& (- (>> val 1) (>> val 21)) 7))")
(#(4DA6DC6C 55F6D36B 5B322558 76A4B4DA 77777223 9F4505D4 A4454CA7 A647599C B2C4B33F BD0E4352 C8A25DB2 E4496B9E EB1E2C6C)
 "#(T SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-THREAD::*STARTING-THREADS* SB-VM::*FREE-TLS-INDEX* SB-APROF::*N-PROFILE-SITES* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ SB-VM::CALLBACK-WRAPPER-TRAMPOLINE SB-VM::*CPU-FEATURE-BITS*)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 4 5 5 13 15 0)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(22FDA262 25C512C8 33893B8A 34338FFE 358752D0 441D6918 49C8CDB2 50EDFBF1 58FAED48 65610EB4 7169F6EF 73A0CCDC 7F2D8268
   839AF3E3 8471EF8C 8DB01467 95785927 96254BD9 A9F4AEDC AAAC2A1C B2B882E2 B6320B0B CB8DC35C D6AE8C5F D9F0FE17 E5F32E85
   E8DC3557 E9A6A6C4 FBDC902B FCF5C338)
 "#(SB-IMPL::INSTALL-HASH-TABLE-LOCK UPDATE-OBJECT-LAYOUT TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 31 13 0 21 18 0 26 22 17 26 3 0 0 18)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(AA218F7 196B4F9D 1A301372 1F2853E0 3052A89D 347C321C 35AC864A 42471D41 473A54B4 473C74AB 48FBACAC 49A8086E 4DA6DC6C 55F6D36B
   5F59B056 69E031A0 77777223 7EEC356F 82C86917 84AAF69A 9EDECB23 A4454CA7 A647599C AEAE7163 B2C4B33F B322ABA7 BD0E4352
   BE1D436C C2FDA1EE C35F4DD7 C8A25DB2 D2EE1CD7 D5C3307D D99277C8 EB1E2C6C)
 "#(T *FREE-INTERRUPT-CONTEXT-INDEX* *ALLOW-WITH-INTERRUPTS* *INTERRUPTS-ENABLED* *INTERRUPT-PENDING* *IN-WITHOUT-GCING* *GC-INHIBIT* *GC-PENDING* SB-IMPL::*UNWEAKENED-VECTORS* SB-VM::*PINNED-OBJECTS* *GC-PIN-CODE-PAGES* SB-VM:*CURRENT-CATCH-BLOCK* SB-VM::*CURRENT-UNWIND-PROTECT-BLOCK* SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-VM:*BINDING-STACK-START* SB-VM:*CONTROL-STACK-START* SB-VM:*CONTROL-STACK-END* *STEPPING* SB-VM::*FREE-TLS-INDEX* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ *GC-EPOCH* %%DATA-VECTOR-REFFERS%% SB-VM::%%DATA-VECTOR-REFFERS/CHECK-BOUNDS%% %%DATA-VECTOR-SETTERS%% SB-VM::%%DATA-VECTOR-SETTERS/CHECK-BOUNDS%% SB-VM::*BINDING-STACK-POINTER* SB-VM::*PSEUDO-ATOMIC-ATOMIC* SB-VM::*PSEUDO-ATOMIC-INTERRUPTED* SB-VM::CALL-INTO-LISP SB-VM::DO-PENDING-INTERRUPT)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 28 0 28 0 9 0 0 0 0 10 0 19 0 18 0 51 26 51 49 10 0 9 0 9 10 20 2 2 19 0)))
  (let ((b (& (>> val 4) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 22FDA262 25C512C8 305A3B6B 33893B8A 34338FFE 36006C21 37B7B1E3 441D6918 49C8CDB2 50EDFBF1 58FAED48 5E1281A1
   5F91445F 630C4B59 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3 8471EF8C 8DB01467 95785927 96254BD9 9B67B3CC
   A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F D9F0FE17 E5D7EC7D E5F32E85 E8DC3557 E9A6A6C4
   FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR UNDEFINED-ALIEN-FUN-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP ENTER-ALIEN-CALLBACK TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 7 9 9 28 28 26 0 0 9 0 34 19 0 34 0 9 49 60 51 0 0 60 0 7 9 9 0 0 0 55 47 34)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 1BB39CAB 22FDA262 25C512C8 305A3B6B 33893B8A 34338FFE 358752D0 36006C21 37B7B1E3 441D6918 49C8CDB2 50EDFBF1
   58FAED48 5E1281A1 5F91445F 630C4B59 65610EB4 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3 8471EF8C 8DB01467
   95785927 96254BD9 9B67B3CC A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F D9F0FE17 E5F32E85
   E8DC3557 E9A6A6C4 FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP ENTER-ALIEN-CALLBACK SB-THREAD::ENTER-FOREIGN-CALLBACK SB-IMPL::INSTALL-HASH-TABLE-LOCK UPDATE-OBJECT-LAYOUT TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 15 0 12 0 9 36 8 0 36 0 0 19 32 0 0 18 36 0 0 0 11 5 16 16 0 51 51 0 1 0 0 46)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(AA218F7 196B4F9D 1A301372 2438874B 3052A89D 347C321C 35AC864A 473A54B4 473C74AB 48FBACAC 49A8086E 4DA6DC6C 55F6D36B 5F59B056
   69E031A0 76A4B4DA 77777223 7EEC356F 82C86917 84AAF69A A4454CA7 A647599C B2C4B33F B322ABA7 BD0E4352 BE1D436C C2FDA1EE
   C35F4DD7 C8A25DB2 CBC915CB D2EE1CD7 D5C3307D D99277C8 EB1E2C6C)
 "#(T *FREE-INTERRUPT-CONTEXT-INDEX* *ALLOW-WITH-INTERRUPTS* *INTERRUPTS-ENABLED* *INTERRUPT-PENDING* *IN-WITHOUT-GCING* *GC-INHIBIT* *GC-PENDING* SB-IMPL::*UNWEAKENED-VECTORS* SB-VM::*PINNED-OBJECTS* *GC-PIN-CODE-PAGES* SB-VM:*CURRENT-CATCH-BLOCK* SB-VM::*CURRENT-UNWIND-PROTECT-BLOCK* SB-VM::*IMMOBILE-CODEBLOB-TREE* SB-VM::*IMMOBILE-CODEBLOB-VECTOR* SB-VM::*DYNSPACE-CODEBLOB-TREE* SB-IMPL::**FINALIZER-STORE** SB-IMPL::*FINALIZER-REHASHLIST* SB-IMPL::*FINALIZERS-TRIGGERED* SB-VM:*BINDING-STACK-START* SB-VM:*CONTROL-STACK-START* SB-VM:*CONTROL-STACK-END* *STEPPING* SB-VM::*FREE-TLS-INDEX* SB-VM::+REQUIRED-FOREIGN-SYMBOLS+ *GC-EPOCH* %%DATA-VECTOR-REFFERS%% SB-VM::%%DATA-VECTOR-REFFERS/CHECK-BOUNDS%% %%DATA-VECTOR-SETTERS%% SB-VM::%%DATA-VECTOR-SETTERS/CHECK-BOUNDS%% SB-C:*ALIEN-STACK-POINTER* *PSEUDO-ATOMIC-BITS* SB-VM::*BINDING-STACK-POINTER* SB-VM::*CPU-FEATURE-BITS*)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 0 16 0 9 0 0 0 0 9 0 10 0 19 0 41 0 7 0 49 18 26 9 0 0 9 19 8 19 18 25 0)))
  (let ((b (& (>> val 4) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(154A3B0 EE643F5 22FDA262 25C512C8 305A3B6B 33893B8A 34338FFE 358752D0 36006C21 37B7B1E3 441D6918 49C8CDB2 50EDFBF1 58FAED48
   5E1281A1 5F91445F 630C4B59 65610EB4 6E2BAD2D 6EC9BAEC 7169F6EF 73A0CCDC 7F2D8268 839AF3E3 8471EF8C 8DB01467 95785927
   96254BD9 9B67B3CC A9F4AEDC AAAC2A1C B2B882E2 B6320B0B C0853F67 C2237D40 CB8DC35C D6AE8C5F D9F0FE17 E5F32E85 E8DC3557
   E9A6A6C4 FBDC902B FCF5C338)
 "#(SUB-GC POST-GC INTERNAL-ERROR CONTROL-STACK-EXHAUSTED-ERROR BINDING-STACK-EXHAUSTED-ERROR ALIEN-STACK-EXHAUSTED-ERROR HEAP-EXHAUSTED-ERROR UNDEFINED-ALIEN-VARIABLE-ERROR MEMORY-FAULT-ERROR UNHANDLED-TRAP-ERROR SB-DI::HANDLE-BREAKPOINT SB-DI::HANDLE-SINGLE-STEP-TRAP ENTER-ALIEN-CALLBACK SB-IMPL::INSTALL-HASH-TABLE-LOCK UPDATE-OBJECT-LAYOUT TWO-ARG-+ TWO-ARG-- TWO-ARG-* TWO-ARG-/ TWO-ARG-< TWO-ARG-> TWO-ARG-= EQL %NEGATE LENGTH ERROR FORMAT EQUALP SB-C::CHECK-DS-LIST SB-C::CHECK-DS-LIST/&REST WRITE-STRING WRITE-CHAR PRINC HAIRY-DATA-VECTOR-SET HAIRY-DATA-VECTOR-REF VECTOR-HAIRY-DATA-VECTOR-SET VECTOR-HAIRY-DATA-VECTOR-REF HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-SET/CHECK-BOUNDS VECTOR-HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS %LDB VECTOR-UNSIGNED-BYTE-8-P)"
 "((let ((tab #a((32) (unsigned-byte 8) 32 9 9 28 28 12 0 0 9 0 34 19 0 12 0 9 26 60 49 0 61 61 0 61 9 9 0 0 0 0 46 34)))
  (let ((b (& val #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::READ-ONLY)"
 "(  (& (>> val 4) 3) )")
(#(3269DBE1 47F582BB 49A5AA56 7D224C44 9E895E42 CE38123D)
 "(SPECIAL IGNORABLE IGNORE DYNAMIC-EXTENT SB-C::CONSTANT-VALUE SB-C::NO-CONSTRAINTS)"
 "(  (& (- (>> val 4) (>> val 27)) 7))")
(#(7808008B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(4C25CEB9 B0581DD2 D9F0FE17 E43E9C8A)
 "(SIGNAL ERROR CERROR WARN)"
 "(  (& (>> val 18) 3) )")
(#(10ACE44E 74748736 7808008B 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(21EEAED8 CBC8EE4C DA0BA737 E2AA03BE)
 "(SB-PCL::READER SB-PCL::WRITER BOUNDP MAKUNBOUND)"
 "(  (& (>> val 6) 3) )")
(#(70CB34EE 73FF2F2A FBE234BC FF414202)
 "(FUNCALLABLE-STRUCTURE LIST VECTOR STRUCTURE)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(3C5A72CA 42CFF1D7 50A623EF 5545367C 9ABE6FD6 A82C3140 AFB09C7B DB03D182 EA7496BF)
 "(&ALLOW-OTHER-KEYS &AUX &BODY &ENVIRONMENT &KEY &MORE &OPTIONAL &REST &WHOLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 3 0 7 5 0 2)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(7808008B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(7808008B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 1) 3) (& (>> val 2) 2)) )")
(#(60268B01 73FD5977 A9A91179 EC8EB822)
 "(:DEFINED :ASSUMED :DEFINED-METHOD :DECLARED)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(19627350 3932B57B 7808008B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(32C229AB 3CB93D68 67803F22 97B016E6 9D5025AF CE38123D)
 "(:UNKNOWN :ALIEN :GLOBAL :MACRO :CONSTANT :SPECIAL)"
 "(  (& (- val (>> val 30)) 7))")
(#(12D85B02 47ED28C7 568510D9 7808008B EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(76A22E5D BABC0674 D05C85DE D58C389F)
 "(SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-LIST)"
 "(  (& val 3) )")
(#(55E45869 62971997 7808008B 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(3C28E423 6610551C 7808008B A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 3) (>> val 16)) 7))")
(#(778D875 31C62284 43432EAF 4E504BCF 5163EC3A 7D224C44 D7979E55)
 "(:RESTORE-NSP :DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (- (>> val 4) (>> val 25)) 7))")
(#(45EE44A3 60268B01 73FD5977 931F2DBC A9A91179 EC8EB822)
 "(:DEFINED-METHOD :DEFINED :DEFINED-HERE :ASSUMED :DECLARED-VERIFY :DECLARED)"
 "(  (& (>> val 12) 7))")
(#(7808008B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(3CB93D68 67803F22 CE38123D D4FD9754)
 "(:UNKNOWN :GLOBAL :GLOBAL-FUNCTION :SPECIAL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7808008B 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 8 0 4 9 0 0 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3C44DAA8 57ED033B 8A3BE106 A3C11751 A872A12A CF79C550)
 "(:MORE-COUNT :MORE-CONTEXT :REST :KEYWORD :OPTIONAL :REQUIRED)"
 "(  (& (- (>> val 4) (>> val 12)) 7))")
(#(32B07AAC 6606156F A156E1ED D9F0FE17 F0526C82)
 "(:UNKNOWN-KEYS :KNOWN :ERROR :FULL :LOCAL)"
 "(  (& (+ (>> val 6) (>> val 24)) 7))")
(#(E353302 3CB93D68 55B0F9E6 A6F460C5 F3C0A986)
 "(:STACK :UNUSED :UNKNOWN :FIXED :DELAYED)"
 "(  (& (- (>> val 3) (>> val 29)) 7))")
(#(658DFD3D DBEA8F1C E4A850F1 F1E59E1F FE1CE099)
 "(:FAST-SAFE :FAST :SMALL-SAFE :SMALL :SAFE)"
 "(  (& (+ (>> val 1) (>> val 24)) 7))")
(#(7808008B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(519DD3CE 55B0F9E6 70E7C178 7808008B 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(1B41D7F E5AE22E 32C229AB 58436D89 5AAEBDB1 5EB9987A A16520EC A6F460C5 DD942C4E E648CF0A EAD102A2)
 "(:ARG-PASS :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 14 0 2 11 0 3 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(DD98FC2 321B4470 65DBD9C4 D312FF46)
 "(:LIVE :READ-ONLY :WRITE :READ)"
 "(  (& (>> val 1) 3) )")
(#(1887978E 206F3878 4DC2A903 75F09E0B 9DFE1B14)
 "(:MORE-RESULT :MORE-ARGUMENT :TEMPORARY :RESULT :ARGUMENT)"
 "(  (& (>> val 29) 7))")
(#(46CC6774 47991116 5CDDC111 728F28C5 74748736 965CD62A A0FAB3A5 C3127E24)
 "(FLOAT SB-ALIEN::MEM-BLOCK ALIEN-VALUE SINGLE-FLOAT DOUBLE-FLOAT SYSTEM-AREA-POINTER SB-ALIEN::RECORD ENUM)"
 "(  (& (>> val 12) 7))")
(#(C88666B 5ABBB036 BBA372CA DAF1A78D)
 "(:IN :COPY :OUT :IN-OUT)"
 "(  (>> val 30) )")
(#(3D6EC19 92586CF4 A1F724C6 A256D8C6 D8C1EE02)
 "(FUNCTION SB-IMPL::PREDICATE SB-IMPL::KEY SB-IMPL::TEST SB-IMPL::TEST-NOT)"
 "(  (& (- (>> val 4) (>> val 11)) 7))")
(#(60574E06 7808008B 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(60574E06 7808008B 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(B3AD09A 10ACE44E 763F1FFB B6EC8FEB D5A4925F DCE23130 FB12CF33)
 "(SB-VM::POSITIVE-FIXNUM FIXNUM INTEGER BIGNUM SB-VM::UNSIGNED-BYTE-63 SB-VM::UNSIGNED-BYTE-64 SB-VM::SIGNED-BYTE-64)"
 "(  (& (- (>> val 1) (>> val 14)) 7))")
(#(AA421F8 389F67F6 786F215B B3F4A1A1 D692DDF5 F5EA1D35)
 "(COMPILED-FUNCTION HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (^ (>> val 1) (>> val 4)) 7))")
(#(8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:CONC-NAME :CONSTRUCTOR :COPIER :PREDICATE)"
 "(  (& val 3) )")
(#(7808008B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 6) (>> val 10)) 7))")
(#(6A4BF1F0 9C1CB8B3 AF040982 F0C8F231)
 "(:INVERT :PRESERVE :DOWNCASE :UPCASE)"
 "(  (& val 3) )")
(#(1DDBED60 483C9C82 609B6613 92586CF4)
 "(SB-C::INHIBIT-FLUSHING SB-C::MODIFYING FUNCTION-DESIGNATOR FUNCTION)"
 "(  (& (>> val 4) 3) )")
(#(76A22E5D BABC0674 D05C85DE D58C389F DED271A4)
 "(SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-OR-DOTTED-LIST SB-C::PROPER-LIST SB-C::PROPER-SEQUENCE TYPE-SPECIFIER)"
 "(  (& (^ val (>> val 21)) 7))")
(#(16506334 3B52AD8C 8D5E9AC0 AC87401A)
 "(:TRUNCATE :CEILING :FLOOR :ROUND)"
 "(  (& (>> val 2) 3) )")
(#(2CFE05E6 4121D2EA 7C31AE8F CD22F006)
 "(:BIVALENT SIGNED-BYTE UNSIGNED-BYTE CHARACTER)"
 "(  (& (>> val 9) 3) )")
(#(3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A 7808008B D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(487A3F33 7DB72BC4 891C1715 C7977052)
 "(:PROBE :IO :OUTPUT :INPUT)"
 "(  (& val 3) )")
(#(F1759B7 9C1CB8B3 E380B278 F0C8F231)
 "(:CAPITALIZE-FIRST :CAPITALIZE :DOWNCASE :UPCASE)"
 "(  (& (>> val 18) 3) )")
(#(1B618B93 600CFD48 6FD9FFE8 782BBB07 CB2101A6)
 "(:SLOT-SET :STRUCT-SET :SVSET :RPLACD :RPLACA)"
 "(  (& (^ (>> val 4) (>> val 21)) 7))")
(#(2469FFDD 92586CF4 B7DA6CE4 D4FD9754)
 "(FUNCTION SB-C::GLOBAL-FUNCTION LAMBDA NAMED-LAMBDA)"
 "(  (& (- val (>> val 4)) 3) )")
(#(2F740446 53DC2256 8612A6FE A55DBD6F)
 "(:ESCAPE :CLEANUP :ZOMBIE :DELETED)"
 "(  (& (>> val 3) 3) )")
(#(2F740446 6F4E2B12 7808008B 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (^ (>> val 3) (>> val 13)) 7))")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 DC4D4F5D E8DC3557)
 "(SB-C::EQUALITY EQL <= >= = > < TYPEP)"
 "(  (& (+ (>> val 1) (>> val 5)) 7))")
(#(2F740446 3C28E423 7808008B 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(32C229AB 5AAEBDB1 A16520EC A6F460C5)
 "(:COMPONENT :ENVIRONMENT :CONSTANT :UNUSED)"
 "(  (& (>> val 2) 3) )")
(#(5B51BB48 5F663783 DE9F2FCD EA82DC34)
 "(:|8H| :|4H| :|16B| :|8B|)"
 "(  (& (>> val 2) 3) )")
(#(5B51BB48 5F663783 BDD7F987 DE9F2FCD EA82DC34 ED70D708)
 "(:|4S| :|2S| :|8H| :|4H| :|16B| :|8B|)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(70CB34EE 9C97CBC8 D23C57ED FF414202)
 "(SB-IMPL::|List| LIST SB-IMPL::|Vector| VECTOR)"
 "(  (& (>> val 1) 3) )")
(#(923ECA5A 965CD62A A0FAB3A5 A447FB2F)
 "(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)"
 "(  (& (>> val 25) 3) )")
(#(4C25CEB9 7C9FDF6F 930967BF D9F0FE17 EADF4A0F)
 "(ERROR WARN STYLE-WARN SB-C:COMPILER-WARN SB-C:COMPILER-STYLE-WARN)"
 "(  (& (^ (>> val 1) (>> val 12)) 7))")
(#(50B431CB 834BCA78 8F6A8805 A1148EC6)
 "(< <= > >=)"
 "(  (& val 3) )")
(#(701EC480 772926CF 7AF3914D E6101645 EDB26522)
 "(RASSOC ASSOC MEMBER POSITION FIND)"
 "(  (& (+ val (>> val 29)) 7))")
(#(3CEB35C3 6C16ABD3 8D437217 E8DC3557)
 "(EQL EQ CHAR= CHAR-EQUAL)"
 "(  (>> val 30) )")
(#(3C28E423 7808008B 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- val (>> val 13)) 7))")
(#(FFEC5B5 7BBEAE7B B31D0A7A E66299E9)
 "(:UNSAFE-DEFAULT :SAFE-DEFAULT :UNBOUND :TRAP)"
 "(  (>> val 30) )")
(#(313790D2 4B430390 519DD3CE 640E844C 8CD5B89F A09FC47B)
 "(SB-C:RETURN-SINGLE RETURN SB-C:KNOWN-RETURN SB-C:TAIL-CALL SB-C:TAIL-CALL-NAMED SB-C:STATIC-TAIL-CALL-NAMED)"
 "(  (& (+ (>> val 8) (>> val 13)) 7))")
(#(3244ACF4 36C411CF 64120058 EF222200)
 "(:NFKC :NFC :NFKD :NFD)"
 "(  (& (>> val 2) 3) )")
(#(B414EE0 3B3832EC 7808008B A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(7808008B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(42FC2E2E 6228BBC6 D3EA690E DE2EACD2 F709D62D)
 "(:MANDATORY :LITERAL :MISER :FILL :LINEAR)"
 "(  (& (^ (>> val 1) (>> val 22)) 7))")
(#(42FC2E2E 6228BBC6 D3EA690E F709D62D)
 "(:MANDATORY :MISER :FILL :LINEAR)"
 "(  (& (>> val 14) 3) )")
(#(FA27DCE 6B6ACBC6 7DBFABF9 A8694C40)
 "(:SECTION-RELATIVE :LINE-RELATIVE :SECTION :LINE)"
 "(  (& (>> val 2) 3) )")
(#(90EDB7B 1FDE90F6 25164A63 50F5AB12 7808008B B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(15432F17 4C25CEB9 D9F0FE17 F49146D7)
 "(:FORCE :ERROR :WARN :PUNT)"
 "(  (& (>> val 20) 3) )")
(#(6C749137 A4C23C90 CEE63FE3 DC8541EA)
 "(:UNKNOWN-RETURN-PARTNER :FUN-END :FUN-START :CODE-LOCATION)"
 "(  (& (^ val (>> val 6)) 3) )")
(#(54FC85B 17D252E7 377D1CA8 519DD3CE 6E2BAD2D 7614C426 B854947D BDE3EA38 D52CECC7)
 "(:UNPARSED :NON-LOCAL-ENTRY :SINGLE-VALUE-RETURN :CALL-SITE :BLOCK-START :NON-LOCAL-EXIT :INTERNAL-ERROR :KNOWN-RETURN :UNKNOWN-RETURN)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 5 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(61131DA 7448084F CE38123D CE82A46E)
 "(SB-PCL::%CLASS SB-PCL::%PARAMETER SB-PCL::%VARIABLE-REBINDING SPECIAL)"
 "(  (& (>> val 4) 3) )")
(#(95B7F751 95EB707D E4E46523 E8DC3557)
 "(CLASS SB-PCL::PROTOTYPE SB-PCL::CLASS-EQ EQL)"
 "(  (& (>> val 1) 3) )")
(#(AA421F8 389F67F6 B3F4A1A1 D692DDF5 F5EA1D35)
 "(HASH-TABLE PACKAGE PATHNAME RANDOM-STATE READTABLE)"
 "(  (& (^ val (>> val 17)) 7))")
(#(208008B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(208008B 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(208008B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(208008B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (- val (>> val 25)) 3) )")
(#(208008B 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(208008B 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 7) (>> val 26)) 7))")
(#(208008B 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(208008B 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 3) (>> val 16)) 7))")
(#(208008B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(208008B BA54B74 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 4 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(208008B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(208008B 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(1B41D7F E5AE22E 32C229AB 58436D89 5AAEBDB1 5EB9987A A16520EC A6F460C5 BA77CFAC DD942C4E E648CF0A EAD102A2)
 "(:ARG-PASS :SPECIFIED-SAVE :UNUSED :ALIAS :COMPONENT :CONSTANT :LOAD :SAVE-ONCE :SAVE :DEBUG-ENVIRONMENT :ENVIRONMENT :NORMAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 13 10 5 2)))
  (let ((b (& (>> val 13) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(208008B 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(208008B 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (>> val 24) 3) )")
(#(208008B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 5) (>> val 24)) 7))")
(#(208008B 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(208008B 2F740446 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (^ (>> val 3) (>> val 13)) 7))")
(#(208008B 2F740446 3C28E423 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(208008B 3C28E423 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- val (>> val 13)) 7))")
(#(208008B B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(208008B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(208008B 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(2808008B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(10ACE44E 2808008B 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(2808008B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(2808008B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 1) 3) (& (>> val 2) 2)) )")
(#(19627350 2808008B 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(12D85B02 2808008B 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (+ (>> val 3) (>> val 28)) 7))")
(#(2808008B 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(2808008B 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 3) (>> val 16)) 7))")
(#(778D875 31C62284 4E504BCF 5163EC3A 7D224C44 D7979E55)
 "(:DYNAMIC-EXTENT :TAGBODY :BLOCK :UNWIND-PROTECT :CATCH :SPECIAL-BIND)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(2808008B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 2808008B 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 3 12 5 0 5 0 0 12)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2808008B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(2808008B 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(2808008B 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(2808008B 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(2808008B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 6) (>> val 10)) 7))")
(#(2808008B 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(2808008B 2F740446 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (^ (>> val 3) (>> val 13)) 7))")
(#(2808008B 2F740446 3C28E423 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(22FAAD9E 3575BB87 95B7E7EF A45FEB43)
 "(SB-VM::YMM-REG SB-VM::INT-AVX2-REG SB-VM::DOUBLE-AVX2-REG SB-VM::SINGLE-AVX2-REG)"
 "(  (& (>> val 23) 3) )")
(#(3828B661 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:DO-NOT-SET :QWORD :DWORD :WORD :BYTE)"
 "(  (& (- (>> val 1) (>> val 23)) 7))")
(#(19A804F1 42354AFF 52F791B3 F1366560)
 "(:LAYOUT-ID :LAYOUT :IMMOBILE-SYMBOL :CARD-TABLE-INDEX-MASK)"
 "(  (& (>> val 16) 3) )")
(#(2808008B 3C28E423 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- val (>> val 13)) 7))")
(#(2808008B 3ABB4966 7F853C99 C0014833)
 "(NIL :INHERITED :EXTERNAL :INTERNAL)"
 "(  (& (>> val 3) 3) )")
(#(B414EE0 2808008B 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(2808008B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1FDE90F6 25164A63 2808008B 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(2808008B 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E BBE26BAD)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::ALIEN-LINKAGE-TABLE SB-VM::READ-ONLY)"
 "(  (& (- val (>> val 8)) 7))")
(#(1000808B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(1000808B 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(1000808B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 21) 3) )")
(#(1000808B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 18) 3) (& (>> val 2) 1)) )")
(#(1000808B 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(1000808B 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(1000808B 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(1000808B 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (^ val (>> val 27)) 7))")
(#(1000808B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 1000808B 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 4 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1000808B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(1000808B 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(1000808B 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(1000808B 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (>> val 27) 3) )")
(#(1000808B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 3) (>> val 18)) 7))")
(#(1000808B 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 4) (>> val 25)) 7))")
(#(1000808B 2F740446 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (- (>> val 4) (>> val 5)) 7))")
(#(1000808B 2F740446 3C28E423 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(19A804F1 3D6712AB 42354AFF 511F123D)
 "(:FDEFN-CALL :LAYOUT :IMMOBILE-SYMBOL :SYMBOL-VALUE)"
 "(  (& (>> val 1) 3) )")
(#(1000808B 3C28E423 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- (>> val 2) (>> val 3)) 7))")
(#(B414EE0 1000808B 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(1000808B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1000808B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(1000808B 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(1008808B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(1008808B 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(1008808B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 21) 3) )")
(#(1008808B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 1) 3) (& (>> val 2) 2)) )")
(#(1008808B 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(1008808B 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(1008808B 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(1008808B 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (^ val (>> val 27)) 7))")
(#(1008808B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 1008808B 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 4 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1008808B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(1008808B 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(1008808B 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(1008808B 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (>> val 27) 3) )")
(#(1008808B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 6) (>> val 10)) 7))")
(#(1008808B 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(1008808B 2F740446 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (- (>> val 4) (>> val 5)) 7))")
(#(1008808B 2F740446 3C28E423 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(1008808B 3C28E423 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- (>> val 2) (>> val 3)) 7))")
(#(B414EE0 1008808B 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(1008808B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1008808B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(1008808B 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(7980B71D 7C678985 8010008B CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(10ACE44E 74748736 8010008B 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(8010008B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(8010008B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 18) 3) (& (>> val 2) 1)) )")
(#(19627350 3932B57B 8010008B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(12D85B02 47ED28C7 568510D9 8010008B EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 7) (>> val 26)) 7))")
(#(55E45869 62971997 8010008B 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(3C28E423 6610551C 8010008B A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 3) (>> val 16)) 7))")
(#(8010008B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8010008B 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 13 11 5 10 2 3)))
  (let ((b (& (>> val 18) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(8010008B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(519DD3CE 55B0F9E6 70E7C178 8010008B 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (- val (>> val 19)) 7))")
(#(60574E06 7BC3707A 7F9752D2 8010008B)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(60574E06 7F9752D2 8010008B ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(7A03BEDF 8010008B 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 6) (>> val 10)) 7))")
(#(3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A 8010008B D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 4) (>> val 25)) 7))")
(#(2F740446 6F4E2B12 8010008B 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (^ (>> val 3) (>> val 13)) 7))")
(#(2F740446 3C28E423 7F853C99 8010008B 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(3C28E423 7F853C99 8010008B 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- val (>> val 13)) 7))")
(#(B414EE0 3B3832EC 8010008B A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(8010008B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1FDE90F6 25164A63 50F5AB12 8010008B B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(2800008B 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 7) 3) )")
(#(10ACE44E 2800008B 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 3) )")
(#(2800008B E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(1694A6AB 32C229AB 7D21904E BD918462)
 "((SB-VM::DESCRIPTOR-REG . 0) (SB-VM::ANY-REG . 1) (SB-VM::SIGNED-REG . 2) (CONSTANT . 3))"
 "(  (& (+ val (>> val 10)) 3) )")
(#(2800008B 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (^ (& (>> val 18) 3) (& (>> val 2) 1)) )")
(#(19627350 2800008B 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(12D85B02 2800008B 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (+ (>> val 3) (>> val 28)) 7))")
(#(2800008B 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(2800008B 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 3) (>> val 16)) 7))")
(#(2800008B 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 2) 3) )")
(#(BA54B74 2800008B 2F740446 3C28E423 53DC2256 5AC1F5A1 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:TOPLEVEL-XEP :ZOMBIE :ASSIGNMENT :MV-LET :LET :CLEANUP :ESCAPE :TOPLEVEL :EXTERNAL :DELETED :OPTIONAL NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 3 12 5 0 5 0 0 12)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2800008B 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 7) 3) )")
(#(2800008B 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 2) (>> val 7)) 7))")
(#(39308E0 D2F362D 1D8EA6A4 2C55EAF7 45334DC4 5D03F722 6EA0F9D1 7C685E1B B38BE789 BA6C5CD5 D36BD4C8 D70B59A6 F5B3D6E9)
 "((:UNPARSE . SB-ALIEN::ALIEN-TYPE-CLASS-UNPARSE) (:TYPE= . SB-ALIEN::ALIEN-TYPE-CLASS-TYPE=) (:SUBTYPEP . SB-ALIEN::ALIEN-TYPE-CLASS-SUBTYPEP) (:LISP-REP . SB-ALIEN::ALIEN-TYPE-CLASS-LISP-REP) (:ALIEN-REP . SB-ALIEN::ALIEN-TYPE-CLASS-ALIEN-REP) (:EXTRACT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-EXTRACT-GEN) (:DEPOSIT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPOSIT-GEN) (:NATURALIZE-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-NATURALIZE-GEN) (:DEPORT-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-GEN) (:DEPORT-ALLOC-GEN . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-ALLOC-GEN) (:DEPORT-PIN-P . SB-ALIEN::ALIEN-TYPE-CLASS-DEPORT-PIN-P) (:ARG-TN . SB-ALIEN::ALIEN-TYPE-CLASS-ARG-TN) (:RESULT-TN . SB-ALIEN::ALIEN-TYPE-CLASS-RESULT-TN))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 8 8 12 2 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2800008B 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 3) 3) )")
(#(2800008B 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(2800008B 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 3) (>> val 18)) 7))")
(#(5CB06058 6187CF81 A87D60AD B3592CF8 C31499A5)
 "((:UNDERFLOW . 16) (:OVERFLOW . 8) (:INEXACT . 32) (:INVALID . 1) (:DIVIDE-BY-ZERO . 4))"
 "(  (& (- val (>> val 11)) 7))")
(#(87C7B06 130E0A01 47AA1C83 7C2C9DA2)
 "((:NEAREST . 0) (:ZERO . 3) (:POSITIVE-INFINITY . 2) (:NEGATIVE-INFINITY . 1))"
 "(  (& (>> val 7) 3) )")
(#(2800008B 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (^ (>> val 4) (>> val 29)) 7))")
(#(2800008B 2F740446 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ESCAPE :CLEANUP :OPTIONAL :ASSIGNMENT)"
 "(  (& (^ (>> val 3) (>> val 13)) 7))")
(#(2800008B 2F740446 3C28E423 7F853C99 8612A6FE CF79C550)
 "(:OPTIONAL :EXTERNAL :TOPLEVEL NIL :ESCAPE :CLEANUP)"
 "(  (& (+ (>> val 1) (>> val 10)) 7))")
(#(7FAC318 200845D2 25A587A6 326AE117 36CF9AC4 3A0738E7 3B78808A 3FDD58BD 5324EAA1 56EBCD25 5B64330B 5D043D7B 6043C540 616E0E34
   6AA7D08C 6C16ABD3 6C7E1410 7A38389C 7BEB14F8 80CE8459 894E975D 9F1BBBF7 A8249CA2 ADA15E82 B5558FF2 BE9931C5 C113CECD
   C7E908A7 D6D8A870 DCF9423A FCF00468)
 "((:O . 0) (:NO . 1) (:B . 2) (:NAE . 2) (:C . 2) (:AE . 3) (:NB . 3) (:NC . 3) (:EQ . 4) (:E . 4) (:Z . 4) (:NE . 5) (:NZ . 5) (:BE . 6) (:NA . 6) (:A . 7) (:NBE . 7) (:S . 8) (:NS . 9) (:P . 10) (:PE . 10) (:PO . 11) (:NP . 11) (:L . 12) (:NGE . 12) (:GE . 13) (:NL . 13) (:LE . 14) (:NG . 14) (:G . 15) (:NLE . 15))"
 "((let ((tab #a((16) (unsigned-byte 8) 15 0 1 0 18 31 7 18 0 31 31 28 16 28 25 0)))
  (let ((b (& (>> val 7) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2800008B 3C28E423 7F853C99 8612A6FE CF79C550)
 "(NIL :EXTERNAL :OPTIONAL :TOPLEVEL :CLEANUP)"
 "(  (& (- val (>> val 13)) 7))")
(#(B414EE0 2800008B 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (>> val 2) 7))")
(#(2800008B C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1FDE90F6 25164A63 2800008B 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(2800008B 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(1F534FA9 2B22A822 326AE117 38FB1241 6C16ABD3 7B8BF3F4 907EA789 A5DDB07E B5CE1611 B713985E DBA0CC85 DCF9423A F27195EB
   F33D181E F4569369 F9429101 FCF00468)
 "((:EQ . 0) (:NE . 1) (:HS . 2) (:CS . 2) (:LO . 3) (:CC . 3) (:MI . 4) (:PL . 5) (:VS . 6) (:VC . 7) (:HI . 8) (:LS . 9) (:GE . 10) (:LT . 11) (:GT . 12) (:LE . 13) (:AL . 14))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 15 0 0 7 0 13 7 13 4 31 0 0 10 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(6F4E2B12 8010008B 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (& (>> val 6) 3) )")
(#(2800008B 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (>> val 30) )")
(#(6F4E2B12 7808008B 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (& (>> val 6) 3) )")
(#(208008B 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (>> val 30) )")
(#(2808008B 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (>> val 30) )")
(#(1000808B 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (>> val 30) )")
(#(1008808B 6F4E2B12 8612A6FE CF79C550)
 "(NIL :ASSIGNMENT :OPTIONAL :CLEANUP)"
 "(  (>> val 30) )")
(#(50EDFBF1 6C16ABD3 934E6A73 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP =)"
 "(  (& (- (>> val 7) (>> val 18)) 7))")
(#(50EDFBF1 934E6A73 AC25889A E8DC3557)
 "(= EQL EQUAL EQUALP)"
 "(  (& (>> val 7) 3) )")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 DC4D4F5D E8DC3557 F0F44D02)
 "(SB-C::VAR-VALUE SB-C::EQUALITY EQL <= >= = > < TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 5 0 1)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3CEB35C3 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL CHAR=)"
 "(  (>> val 30) )")
(#(3CEB35C3 6C16ABD3 8D437217 AC25889A E8DC3557)
 "(EQ EQL EQUAL CHAR= CHAR-EQUAL)"
 "(  (& (+ val (>> val 23)) 7))")
(#(2525125C 7A008CFF 7E4DD5CC D12F6AC7 EE39AD85)
 "(:DATUM :EXPECTED-TYPE :FORMAT-CONTROL :FORMAT-ARGUMENTS :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 3) (>> val 5)) 7))")
(#(37E8DF0E 40CEAC91 49B323B8 7E4DD5CC B2B2C816)
 "(:START1 :START2 :END1 :END2 :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 2) (>> val 21)) 7))")
(#(25164A63 591576FD 70AC33CD 75D43470 7E4DD5CC E25EBD1D)
 "(:NAME :EXPRESSION :GETTER :DOCUMENTATION :VALUES-DOCUMENTATION :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 8)) 7))")
(#(3D6EC19 7E4DD5CC A1F724C6 A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:FROM-END :START :END :KEY :TEST :TEST-NOT :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 10) (>> val 24)) 7))")
(#(2FC3A1FE 4870B954 51F4DBE6 5467B62E 58402903 5AD6A434 6251F97E 7720D5AC 861F4BC0 9DA92895 BCDCF7EE C8BAC61D D1583289
   D4C55BFE ECDB9F8D F084EFEF F7277B08 FDE111BA)
 "(:LISTEN :UNREAD :FORCE-OUTPUT :FINISH-OUTPUT :CHARPOS :GET-FILE-POSITION :SET-FILE-POSITION :ELEMENT-TYPE :ELEMENT-MODE :EXTERNAL-FORMAT :LINE-LENGTH :FILE-LENGTH :FILE-STRING-LENGTH :CLEAR-INPUT :CLEAR-OUTPUT :CLOSE :INTERACTIVE-P :RESET-UNICODE-P)"
 "((let ((tab #a((16) (unsigned-byte 8) 7 0 0 1 13 3 21 0 15 12 12 0 0 0 0 30)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(1FD7365 10A05548 65D8B1BB 7E4DD5CC A30466D2 B1619E90)
 "(:ACCESSOR-FUN :COMPARATOR :RAW-TYPE :N-WORDS :ALIGNMENT :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 19)) 7))")
(#(3048E87 28BEF00E 321E4B7B 62402029 7A4EAC07 ED4F58DE)
 "(%RAW-INSTANCE-REF/WORD %RAW-INSTANCE-REF/SINGLE %RAW-INSTANCE-REF/DOUBLE %RAW-INSTANCE-REF/SIGNED-WORD %RAW-INSTANCE-REF/COMPLEX-SINGLE %RAW-INSTANCE-REF/COMPLEX-DOUBLE)"
 "(  (& (- (>> val 12) (>> val 13)) 7))")
(#(33F7BE81 4B4A274F 7E4DD5CC B7A0F732 B8D43E7C)
 "(:STORAGE :HASH-FUNCTION :TEST-FUNCTION :MUTEX :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 17)) 7))")
(#(9EB05 25164A63 3AE4BD71 3F3C2E20 443A80D1 5A7DFA1B 65A6E24A 6759FEBE 67989E4B 7C685E1B 7D3B699F 7E4DD5CC B57BDDD2 BC01B3D3
   EAB41BD3 F97ABC4E)
 "(:NAME :SIMPLE-SUBTYPEP :COMPLEX-SUBTYPEP-ARG1 :COMPLEX-SUBTYPEP-ARG2 :SIMPLE-UNION2 :COMPLEX-UNION2 :SIMPLE-INTERSECTION2 :COMPLEX-INTERSECTION2 :SIMPLE-= :COMPLEX-= :NEGATE :UNPARSE :MIGHT-CONTAIN-OTHER-TYPES-P :ENUMERABLE-P :SINGLETON-P :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 0 0 0 8 4 6)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:FROM-END :START :END :KEY :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 5) (>> val 11)) 7))")
(#(3F3C2E20 443A80D1 5A7DFA1B 6759FEBE 67989E4B 7C685E1B BC01B3D3 EAB41BD3 F97ABC4E)
 "(:COMPLEX-SUBTYPEP-ARG1 :NEGATE :SINGLETON-P :UNPARSE :COMPLEX-SUBTYPEP-ARG2 :SIMPLE-INTERSECTION2 :SIMPLE-UNION2 :SIMPLE-SUBTYPEP :SIMPLE-=)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 15 5 0 0 0 4)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(5E8314A3 70B930E9 A565D3F4 CA854E43 D0EBB0CC E7A863B7 F613BAB9)
 "(HAIRY-TYPE UNKNOWN-TYPE SIMD-PACK-TYPE SIMD-PACK-256-TYPE ALIEN-TYPE-TYPE NEGATION-TYPE ARRAY-TYPE)"
 "(  (& (+ (>> val 2) (>> val 6)) 7))")
(#(2B1B6E54 314F6D44 70B930E9 989C005B B72721C7 F7BC5EEE)
 "(VALUES-TYPE CONSTANT-TYPE CLASSOID NUMERIC-TYPE FUN-TYPE ALIEN-TYPE-TYPE)"
 "(  (& (>> val 7) 7))")
(#(369B369F 400FA42C 7E4DD5CC C0AE1364 CC402FF2)
 "(:FREE-VARS :FREE-FUNS :EQL-CONSTANTS :SIMILAR-CONSTANTS :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 13)) 7))")
(#(62312A5 21AC9545 30ADE5DA 3D479CA1 404EA5BB 41B1E915 43100125 4CF678BE 4F857BD6 72211BC7 743AF610 79206A18 7E4DD5CC 882FE354
   8E5312FE AAC62EE3 ACA4B3F9 B020C0A6 BA994C49 DC9533E1 FAC3EE17 FBCE81FB)
 "(:FUN-NAMES-IN-THIS-FILE :CONSTANT-CACHE :SAVED-OPTIMIZE-DECLS :COVERAGE-METADATA :MSAN-UNPOISON :SSET-COUNTER :COMPILE-TOPLEVEL-OBJECT :BLOCK-COMPILE :ENTRY-POINTS :TOPLEVEL-LAMBDAS :PENDING-TOPLEVEL-LAMBDAS :PACKAGE-ENVIRONMENT-CHANGED :OBJMAP-OBJ-TO-ID :OBJMAP-ID-TO-NODE :OBJMAP-ID-TO-COMP :OBJMAP-ID-TO-LEAF :OBJMAP-ID-TO-CONT :OBJMAP-ID-TO-IR2BLOCK :OBJMAP-ID-TO-TN :OBJMAP-ID-TO-LABEL :DELETED-SOURCE-PATHS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 26 0 11 13 0 21 21 0 15 9 13 0 0 13 20 15)))
  (let ((b (& (>> val 11) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(19A804F1 25164A63 2A8940D9 35050B53 371E7F74 7E4DD5CC 7FAFB02A 8AE61EAA BD6261C1 D8C1EE02 E58B6D43 FAC6D96D)
 "(:%BITS :NAME :LAYOUT :STATE :DIRECT-SUPERCLASSES :SOURCE-LOCATION :SUBCLASSES :%LOCK :PCL-CLASS :TRANSLATION :PREDICATE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 0 12 5 5 8 12)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(19A804F1 80423227 A4038138 C8A25DB2 E45D7F1B)
 "(T STRUCTURE-OBJECT LAYOUT SB-LOCKLESS::LIST-NODE SB-BROTHERTREE::UNARY-NODE)"
 "(  (& (>> val 13) 7))")
(#(25164A63 70AC33CD 7E4DD5CC 919CF251 91F6BD42 992C0618 9B40E23D B3CD2755 C433E93A C98D7EA2 D1B31032)
 "(:NAME :INITARGS :READERS :WRITERS :INITFORM-P :INITFORM :INITFUNCTION :ALLOCATION :CELL :DOCUMENTATION :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 9 14 0 3 3 5 2)))
  (let ((b (& (>> val 12) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(5C3634FE 70AC33CD 919CF251 C3EABF48 CBC8EE4C D1B31032 DA0BA737 F9076A5F)
 "(:READER :WRITER :ACCESSOR :INITFORM :INITARG :ALLOCATION :DOCUMENTATION :TYPE)"
 "(  (& (+ (>> val 21) (>> val 22)) 7))")
(#(FA27DCE 4814BD7C 92586CF4 B3CD2755 CD2DF002)
 "(:READERS :INITIALIZATION :GENERIC-FUNCTION :FUNCTION :SECTION)"
 "(  (& (>> val 15) 7))")
(#(FA27DCE 40ACECF7 8FA1FE79 92586CF4 969A8B82 9D5025AF B9E517EC C3EABF48)
 "(:FUNCTION :SPECIAL-OPERATOR :MACRO :SECTION :GLOSSARY :TYPE :SYSTEM-CLASS :ISSUE)"
 "(  (& (^ (>> val 5) (>> val 29)) 7))")
(#(314F6D44 4BFE7539 98887AA5 9D5025AF D23E7FFA)
 "(:FUNCTION-TYPE :VALUES-TYPE :MACRO DESTRUCTURING-BIND DEFMETHOD)"
 "(  (& (+ (>> val 4) (>> val 14)) 7))")
(#(711A4A7E 7E4DD5CC B9299420 BDE7A1BC F51BE375)
 "(:CONTEXT :ACCEPT :CONDITION-CLASS :SILENT :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 2) (>> val 22)) 7))")
(#(530CC6DE 5AAEBDB1 5C3634FE 628720A3 7E4DD5CC)
 "(:ACCESSOR :DOC-STRING-ALLOWED :ENVIRONMENT :WRAP-BLOCK :ALLOW-OTHER-KEYS)"
 "(  (& (^ val (>> val 8)) 7))")
(#(1A212F81 3C93139D 7E4DD5CC ADF1BE03 BDE7A1BC)
 "(:CONTEXT :ALLOW-SPECIAL :ALLOW-SYMBOL-MACRO :SIGNAL-VIA :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 16)) 7))")
(#(25164A63 48131EF9 496BF7A5 4E4CD394 7E4DD5CC 80D6A04E EF0B5E5B)
 "(:NAME :DESCRIPTION :VAR :COUNT :LEVEL :ACTION :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 2) (>> val 28)) 7))")
(#(9D37842 DDAD4B3 1B8EF4AF 5B37F581 5B94F729 6FCDFF82 7E4DD5CC 809C5A3D 80C55064 82DB1CB3 87A7A8BD A490A9F2 A85C97D2 B874FF56
   C2D707AB C5998C8B CF4536C9 D57549C5 D7B83BC9 FCDE4902 FD45EC0C)
 "(:ATTRIBUTES :TRANSFORMS :DERIVE-TYPE :OPTIMIZER :LTN-ANNOTATE :IR2-CONVERT :IR2-HOOK :STACK-ALLOCATE-RESULT :CONSTRAINT-PROPAGATE :CONSTRAINT-PROPAGATE-BACK :CONSTRAINT-PROPAGATE-RESULT :CONSTRAINT-PROPAGATE-IF :EQUALITY-CONSTRAINT :TEMPLATES :PREDICATE-TYPE :RESULT-ARG :CALL-TYPE-DERIVER :ANNOTATION :FOLDER :EXTERNALLY-CHECKABLE-TYPE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 15 0 13 0 0 12 1 0 29 0 0 14 0 16 0 20)))
  (let ((b (& (>> val 4) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1E407120 25164A63 41E29034 7E4DD5CC 7F2D8268 9ACD936C F7A05D36)
 "(:NAME :WIDETAG :LOWTAG :LENGTH :VARIABLE-LENGTH-P :SLOTS :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 8) (>> val 23)) 7))")
(#(4B4A274F 4E4CD394 65D8B1BB 7E4DD5CC 96DAC0E4 B7A0F732 B8D43E7C)
 "(:STORAGE :COMPARATOR :HASH-FUNCTION :MUTEX :TOMBSTONES :COUNT :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 29)) 7))")
(#(19861A55 3C6008ED 4DDE5A76 7E4DD5CC B6B9431B)
 "(:%NODE-NEXT :NODE-HASH :SO-KEY :SO-DATA :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 17)) 7))")
(#(31C62284 398417AB 6731B27F 7E4DD5CC 97ECB0B8 D8F2B7EA)
 "(:KIND :NEXT :USE :BLOCK :SOURCE-PATH :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 19)) 7))")
(#(76475C8 D13F988 543DAB03 6731B27F 7E4DD5CC)
 "(:SOURCE-PATH :LEXENV :FIRED :CALLER :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 3) (>> val 15)) 7))")
(#(76475C8 2D73CB20 543DAB03 6731B27F 7E4DD5CC)
 "(:SOURCE-PATH :LEXENV :FIRED :HOOK :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 5) (>> val 23)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC 97ECB0B8)
 "(:SOURCE-PATH :LEXENV :FIRED :KIND :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 29)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC E1807821)
 "(:SOURCE-PATH :LEXENV :FIRED :DEPS :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 30)) 7))")
(#(76475C8 B6D895E D13F988 18900DC4 543DAB03 6731B27F 7E4DD5CC C3EABF48 E1807821)
 "(:SOURCE-PATH :LEXENV :FIRED :DEPS :CALLER :ARG-SPECS :RESULT-SPECS :TYPE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 5 5 0 2 3 7 6)))
  (let ((b (& (>> val 25) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC BDE7A1BC C3EABF48)
 "(:SOURCE-PATH :LEXENV :FIRED :TYPE :CONTEXT :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 13)) 7))")
(#(76475C8 543DAB03 6731B27F 7E4DD5CC F9479566)
 "(:SOURCE-PATH :LEXENV :FIRED :LAMBDA-VAR :ALLOW-OTHER-KEYS)"
 "(  (& (- val (>> val 23)) 7))")
(#(56A80A0 38475264 606E0E3A 7C9BA40B 7E4DD5CC 97ECB0B8 C9A0837E EAE843E3 FB685091 FF5AE652)
 "(:KIND :HEAD :TAIL :EXITS :SUPERIOR :INFERIORS :DEPTH :BLOCKS :INFO :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 0 9 0 7 4)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(911164C C88666B 2577E983 2F96D56B 3FEA2955 41F42BDE 49E6CD92 79709755 7E4DD5CC 81748681 8DBB3B18 913D62D2 A16520EC AAB814A7
   B86B8F68 BA14BD32 C1D4C246 C9A0837E D8F2B7EA DAF1A78D)
 "(:NUMBER :PRED :SUCC :START :LAST :NEXT :PREV :FLAGS :KILL :IN :OUT :LOOP :LOOP-NEXT :DOMINATOR :COMPONENT :FLAG :INFO :XREFS :ENVIRONMENT-CACHE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 16 0 1 31 26 7 0 3 1 0 28 1 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(7E4DD5CC B7DA6CE4 C9A0837E CEDEE978 FA6E74B3)
 "(:LAMBDA :CLOSURE :NLX-INFO :INFO :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 24)) 7))")
(#(449607FC 7D224C44 7E4DD5CC 8DBB3B18 97ECB0B8 B4C67B51 C3EABF48 C80506D7 C9A0837E D3801745 FBB90A17 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :SETS :KIND :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 13 11 10 5 2 3)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(2AE9D012 449607FC 56EE5555 7D224C44 7E4DD5CC 8DBB3B18 97530388 97ECB0B8 B4C67B51 C3EABF48 C80506D7 C9A0837E D3801745
   DEB0B530 FBB90A17 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :SETS :KIND :INLINEP :INLINE-EXPANSION :SAME-BLOCK-P :FUNCTIONAL :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 8 14 4 4 0 0 12)))
  (let ((b (& (>> val 21) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 1C30AB06 2AE9D012 36600B32 449607FC 49A5AA56 543DAB03 56EE5555 5D0B9381 6595C69C 70AC33CD 7D224C44 7E4DD5CC
   8DBB3B18 97ECB0B8 9A8CE552 B4C67B51 C3EABF48 C80506D7 C9A0837E E2114B36 F6179573 FBB90A17 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :%DEBUG-NAME :KIND :HAS-EXTERNAL-REFERENCES-P :ENTRY-FUN :INLINEP :INLINE-EXPANSION :LEXENV :ARG-DOCUMENTATION :DOCUMENTATION :ENCLOSE :PLIST :XREF :INLINE-EXPANDED :TOP-LEVEL-DEFUN-P :IGNORE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 21 21 8 13 24 0 31 31 21 15 21 0 0 0 0 19)))
  (let ((b (& (>> val 15) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 132431BB 1475CAAE 1C30AB06 1D4D0DFE 2AE9D012 36600B32 449607FC 4859C740 487BB5A9 49A5AA56 4E9A2F9A 543DAB03
   555E2679 56EE5555 5AAEBDB1 5D0B9381 646D538E 6595C69C 70AC33CD 7D224C44 7E4DD5CC 8CD5B89F 8DBB3B18 8FDB5971 97ECB0B8
   9A8CE552 B4C67B51 C3EABF48 C80506D7 C9A0837E D96D3DEB E2114B36 F0A1752E F6179573 FBB90A17 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :%DEBUG-NAME :KIND :HAS-EXTERNAL-REFERENCES-P :ENTRY-FUN :INLINEP :INLINE-EXPANSION :LEXENV :ARG-DOCUMENTATION :DOCUMENTATION :ENCLOSE :PLIST :XREF :INLINE-EXPANDED :TOP-LEVEL-DEFUN-P :IGNORE :VARS :OPTIONAL-DISPATCH :BIND :RETURN :HOME :LETS :ENTRIES :DYNAMIC-EXTENTS :CALLS-OR-CLOSES :TAIL-SET :ENVIRONMENT :CALL-LEXENV :ALLOW-INSTRUMENTING :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 28 0 9 0 0 7 61 22 19 0 28 46 19 0 0 0 0 0 19 0 46 9 0 9 0 41 33 28 0 11 52)))
  (let ((b (& val #x1f)))
   (let ((a (>> val 27)))
    (^ a (aref tab b))))))")
(#(5CA83E1 AC49519 1C30AB06 2AE9D012 36600B32 449607FC 45EA8C50 49A5AA56 543DAB03 56EE5555 587A3C01 5D0B9381 6595C69C 672AF595
   6731B27F 70AC33CD 7D224C44 7E4DD5CC 8DBB3B18 97ECB0B8 9A8CE552 B4C67B51 BA994C49 C3EABF48 C80506D7 C9A0837E CF524FF7
   E2114B36 ED178322 F3FC2F5A F578D6D4 F6179573 FBB90A17 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :%DEBUG-NAME :KIND :HAS-EXTERNAL-REFERENCES-P :ENTRY-FUN :INLINEP :INLINE-EXPANSION :LEXENV :ARG-DOCUMENTATION :DOCUMENTATION :ENCLOSE :PLIST :XREF :INLINE-EXPANDED :TOP-LEVEL-DEFUN-P :IGNORE :ARGLIST :ALLOWP :KEYP :SOURCE-PATH :MIN-ARGS :MAX-ARGS :ENTRY-POINTS :MORE-ENTRY :MAIN-ENTRY :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((32) (unsigned-byte 8) 9 7 26 0 9 0 19 0 28 7 0 0 18 9 28 0 51 2 0 0 0 0 0 0 0 7 0 1 10 0 37 28)))
  (let ((b (& (>> val 1) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(24D43549 55AC13F7 7E4DD5CC 9768E79A 97ECB0B8 A256D8C6 D1C6DFEB F32C02D3)
 "(:SPECIALP :KIND :SUPPLIED-P :SUPPLIED-USED-P :DEFAULT :DEFAULT-P :KEY :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 2)) 7))")
(#(132431BB 1DE6A158 294F39FA 449607FC 775AF7A7 7C914DB1 7D224C44 7E4DD5CC 8D9220F2 8DBB3B18 969168E9 B144478F B4C67B51
   BA14BD32 C1B40A07 C3EABF48 C80506D7 C9A0837E D3801745 DC2E453B FBB90A17 FCD92448 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :SETS :FLAGS :HOME :ARG-INFO :SPECVAR :CONSTRAINTS :CTYPE-CONSTRAINTS :EQ-CONSTRAINTS :EQL-VAR-CONSTRAINTS :INHERITABLE-CONSTRAINTS :EQUALITY-CONSTRAINTS :VALUE-ID-CONSTRAINTS :SOURCE-FORM :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 31 0 0 0 11 31 1 14 0 1 31 1 21 25)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(30A8A35 3D6EC19 4214F49C 543DAB03 595DD316 6731B27F 714FAFD7 7E4DD5CC 81748681 845FE436 8DBB3B18 9EE6C4C4 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :TEST :CONSEQUENT :CONSEQUENT-CONSTRAINTS :ALTERNATIVE :ALTERNATIVE-CONSTRAINTS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 12 0 1 0 8)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 F4561F5 164A583D 4214F49C 543DAB03 6731B27F 7E4DD5CC 80D6A04E 81748681 845FE436 8DBB3B18 94DAB903 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :DERIVED-TYPE :LVAR :VAR :VALUE :ID :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 8 12 0 0 12 5)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 B7DA6CE4 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :LAMBDA :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 5 0 0 5 3)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 9DFE1B14 B41DF16F B7DA6CE4 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :LAMBDA :RESULT :RESULT-TYPE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 12 5 0 0 5 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 708311D1 75BE94BF 7E4DD5CC 81748681 845FE436 8DBB3B18 94DAB903 BDE7A1BC CED537B8
   D8F2B7EA F23C413D)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :DERIVED-TYPE :LVAR :ASSERTED-TYPE :TYPE-TO-CHECK :%TYPE-CHECK :VALUE :CONTEXT :SILENT-CONFLICT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 8 2 12 11 0 12)))
  (let ((b (& (>> val 8) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 2550504B 4214F49C 472803DE 543DAB03 6731B27F 708311D1 75BE94BF 7E4DD5CC 81748681 845FE436 88A9C647 8DBB3B18
   94DAB903 B734105A BDE7A1BC CED537B8 D8F2B7EA F23C413D)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :DERIVED-TYPE :LVAR :ASSERTED-TYPE :TYPE-TO-CHECK :%TYPE-CHECK :VALUE :CONTEXT :SILENT-CONFLICT :CHECK :DERIVED :ARRAY :BOUND :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 13 0 7 0 0 1 11 0 0 13 18 0 0 21 21)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(56A80A0 4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8612A6FE 8DBB3B18 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :EXITS :CLEANUP :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 4 2 3 0 14)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 94DAB903 9B0ED14E D8F2B7EA FA6E74B3)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :DERIVED-TYPE :LVAR :ENTRY :VALUE :NLX-INFO :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 5 11 13 2 3 10)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 5C8719A1 6731B27F 7D224C44 7E4DD5CC 81748681 845FE436 8DBB3B18 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :FUNS :DYNAMIC-EXTENT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 2 13 5 2 3 7)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4214F49C 543DAB03 5597FB3D 6731B27F 7E4DD5CC 81748681 845FE436 8612A6FE 8DBB3B18 B3E34B4F C9A0837E D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :VALUES :CLEANUP :INFO :PRESERVE-INFO :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 12 5 0 2 0 3 4)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(25164A63 4E4CD394 7E4DD5CC 97ECB0B8 B737E419)
 "(:NAME :KIND :COUNT :WARNINGS :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 6) (>> val 17)) 7))")
(#(D1437A 14323D3 53E1077 6A5DE4D 116F91DF 1FA0936E 3E3AD04F 68FE090F 6ADC1826 7BA82FCD 7E4DD5CC 8FDB5971 96C89048 A3545607
   C26DF4DD D1532B90 D22C5456 D52A23C5)
 "(:GLOBAL-TN-COUNTER :NORMAL-TNS :RESTRICTED-TNS :WIRED-TNS :CONSTANT-TNS :COMPONENT-TNS :SPECIFIED-SAVE-TNS :VALUES-RECEIVERS :STACK-ALLOCATES-P :STACK-MESS-UPS :CONSTANTS :ENTRIES :ALIAS-TNS :SPILLED-VOPS :SPILLED-TNS :N-JUMP-TABLE-ENTRIES :COVERAGE-MAP :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 16 0 7 15 15 13 0 14 0 12 0 16 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(16BA48E6 25164A63 7E4DD5CC 8D2AB8C8 9A8CE552 AF9EE065 C3EABF48 ED71D329)
 "(:CLOSURE-TN :OFFSET :NAME :ARGUMENTS :FORM/DOC :TYPE :XREF :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 9) (>> val 31)) 7))")
(#(15CA9185 26C1420D 50B17B49 7E4DD5CC B5569C34 BF470720 C0AA89EA CEDEE978 DB3BA8E3 DEF3601F F3CE597E)
 "(:CLOSURE :OLD-FP :RETURN-PC :RETURN-PC-PASS :LIVE-TNS :DEBUG-LIVE-TNS :ELSEWHERE-START :ENVIRONMENT-START :CLOSURE-SAVE-TN :BSP-SAVE-TN :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 12 5 4 8 3 6)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(39216332 42D15C59 4E4CD394 7E4DD5CC 97ECB0B8 E7FC6B6E)
 "(:KIND :COUNT :PRIMITIVE-TYPES :TYPES :LOCATIONS :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 4) (>> val 27)) 7))")
(#(132431BB 7E4DD5CC A063C516 A0AF8FF9 E068D776)
 "(:HOME :SAVE-SP :TARGET :BLOCK-TN :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 4) (>> val 29)) 7))")
(#(598DE63 71A5A23 9D37842 140C6C3A 25164A63 26880BE1 26CAE708 27258A67 30AA239B 364AB2DB 4477100B 6798FB8F 7A372C76 7E4DD5CC
   88FB8978 89F00D50 8F227489 954DDD0B 9C1E40C0 9C6C4CD2 B69202E5 BD70C3D5 C3EABF48 C5C8EBF4 C91B07FD D8B891DE DCFC54DF
   DD7EA063 E962486B EB165265 EF0AB1CD FEA4EC0E)
 "(:NAME :TYPE :ARG-TYPES :RESULT-TYPES :MORE-ARGS-TYPE :MORE-RESULTS-TYPE :GUARD :LTN-POLICY :COST :NOTE :INFO-ARG-COUNT :SAVE-P :MOVE-ARGS :ARG-COSTS :RESULT-COSTS :MORE-ARG-COSTS :MORE-RESULT-COSTS :ARG-LOAD-SCS :RESULT-LOAD-SCS :MORE-ARG-LOAD-SCS :GENERATOR-FUNCTION :VARIANT :NUM-ARGS :NUM-RESULTS :TEMPS :REF-ORDERING :TARGETS :OPTIMIZER :OPTIONAL-RESULTS :MOVE-VOP-P :AFTER-SC-SELECTION :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 1 26 0 15 31 31 17 31 21 16 0 3 19 22 1 27)))
  (let ((b (& (>> val 10) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1473BF8C 20BFF854 25164A63 413E277F 7E4DD5CC 97ECB0B8 9B206D3E)
 "(:NAME :KIND :SIZE :INDEX :SIZE-INCREMENT :SIZE-ALIGNMENT :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 4)) 7))")
(#(1D4FDC60 4797C38A 7E4DD5CC 95DAB988 97E7FAAF AC8AAF96 B1EB0C6C C0AA89EA)
 "(:CURRENT-SIZE :LAST-OFFSET :CONFLICTS :ALWAYS-LIVE :LIVE-TNS :LAST-BLOCK-COUNT :WIRED-MAP :ALLOW-OTHER-KEYS)"
 "(  (& (- val (>> val 30)) 7))")
(#(11A06980 221E3489 25164A63 2AA4982B 336271CA 367D0C61 39216332 398E36A6 6B412252 7E4DD5CC 8DBB3B18 9CFE29F4 A3FEDC32
   B1619E90 C25CE271 CA9FC928 CF6B27C3 D8B891DE)
 "(:NAME :NUMBER :SB :ELEMENT-SIZE :LOCATIONS :OPERAND-SIZE :ALTERNATE-SCS :CONSTANT-SCS :SAVE-P :MOVE-FUNS :LOAD-COSTS :MOVE-VOPS :MOVE-COSTS :MOVE-ARG-VOPS :NUMBER-STACK-P :ALIGNMENT :RESERVE-LOCATIONS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 1 0 12 0 0 7 0 0 13 18 7 0 0 29 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(B855F24 23AFA2C0 2B09B688 32B07AAC 51F619C0 5A6B45E6 5AAEBDB1 68D26CEA 75FBBDA9 7E4DD5CC 8D2AB8C8 8DBB3B18 971BB2D0 97ECB0B8
   AD4F8992 C3EABF48 D8F2B7EA D9A3A394 E01F531E E9A96A46 EB165265)
 "(:NUMBER :KIND :PRIMITIVE-TYPE :TYPE :LEAF :NEXT :READS :WRITES :NEXT* :LOCAL :LOCAL-NUMBER :LOCAL-CONFLICTS :GLOBAL-CONFLICTS :CURRENT-CONFLICT :SAVE-TN :SC :OFFSET :COST :ENVIRONMENT :VERTEX :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 31 0 0 1 12 13 1 7 0 13 13 22 17 0 30 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(5CDCA05 9467E15 25164A63 58436D89 5FFDEE71 6BB3018B 7E4DD5CC 8D2AB8C8 97ECB0B8 A063C516 BC9B6CEF D6D8F2D9)
 "(:NAME :KIND :TARGET :TEMP :BORN :DIES :LOAD-TN :LOAD :SCS :OFFSET :UNUSED-IF :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 7 12 0 8 7)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(71A5A23 7BE111A B66DCF7 DBA5087 140C6C3A 19825BC5 25164A63 26CAE708 2D56D592 30AA239B 525E241A 6978EE9A 69E0CFE8 6C9BA26B
   7A372C76 7D0FE4C9 7E4DD5CC 8205E477 9AC82294 BD70C3D5 C5C8EBF4 D8B891DE DCFC54DF EB165265 EC9CCEB9 EF0AB1CD F3301F6E
   FAC6D96D FF5369AA)
 "(:SOURCE-LOCATION :NAME :INHERITS :ARGS :RESULTS :TEMPS :MORE-ARGS :MORE-RESULTS :OPERANDS :OPTIONAL-RESULTS :IGNORES :CONDITIONAL-P :ARG-TYPES :RESULT-TYPES :GUARD :COST :BODY :VARIANT :VARIANT-VARS :VOP-VAR :NODE-VAR :INFO-ARGS :NOTE :TRANSLATE :LTN-POLICY :SAVE-P :MOVE-ARGS :BEFORE-LOAD :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 21 18 31 16 13 21 20 7 13 0 0 20 1 26 0)))
  (let ((b (& (>> val 17) #xf)))
   (let ((a (>> (<< val 6) 28)))
    (^ a (aref tab b))))))")
(#(1B41D7F 58436D89 75F09E0B 9DFE1B14 A048B3D2)
 "(:LOAD :ARGUMENT :EVAL :RESULT :SAVE)"
 "(  (& (+ (>> val 2) (>> val 6)) 7))")
(#(5CDCA05 33F93593 8059D202 A063C516 C2E7E4AB D6D8F2D9 F4EEBB87)
 "(:SCS :LOAD-TN :LOAD-IF :MORE :TARGET :FROM :TO)"
 "(  (& (^ (>> val 6) (>> val 9)) 7))")
(#(5CDCA05 2B09B688 8D2AB8C8 A063C516 BC9B6CEF C2E7E4AB F4EEBB87)
 "(:TARGET :SC :OFFSET :FROM :TO :SCS :UNUSED-IF)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(35387DE 71A5A23 B66DCF7 DBA5087 140C6C3A 19825BC5 1BBE4C76 206F3878 30AA239B 49A5AA56 525E241A 5EEAA1C3 6978EE9A 6C9BA26B
   6D7CB844 7A372C76 9AC82294 B0EB6377 BD70C3D5 C5C8EBF4 C7E7B222 C9A0837E D8B891DE DCFC54DF)
 "(:ARGS :RESULTS :CONDITIONAL :TEMPORARY :GENERATOR :BEFORE-LOAD :INFO :IGNORE :VARIANT :VARIANT-VARS :VARIANT-COST :VOP-VAR :ARG-REFS :RESULT-REFS :MOVE-ARGS :NODE-VAR :NOTE :ARG-TYPES :RESULT-TYPES :TRANSLATE :GUARD :POLICY :SAVE-P :OPTIONAL-RESULTS)"
 "((let ((tab #a((16) (unsigned-byte 8) 13 0 1 31 0 31 15 7 13 31 17 0 10 31 31 0)))
  (let ((b (& (>> val 9) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(7C63BDA FBB93BA 1694A6AB 38C33399 7D21904E A8F05515 B3FF677B BD918462 D6832FDB)
 "(SB-VM::ANY-REG SB-VM::UNSIGNED-REG SB-VM::SIGNED-REG SB-VM::SAP-REG SB-VM::DESCRIPTOR-REG SB-VM::SINGLE-REG SB-VM::DOUBLE-REG SB-VM::COMPLEX-DOUBLE-REG SB-VM::COMPLEX-SINGLE-REG)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 3 0 3 5 2 0)))
  (let ((b (& (>> val 5) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4F8B4A07 5DB2EF1B 71A4657D 7980B71D A18392B1 B9213E14)
 "(SB-VM::UNSIGNED-NUM SB-VM::SIGNED-NUM SB-VM::TAGGED-NUM COMPLEX-DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT *)"
 "(  (& (- (>> val 2) (>> val 12)) 7))")
(#(E353302 1B054DAD 32C229AB 68D86CC1 C789C859 FF98FC30)
 "(SB-VM::REGISTERS SB-VM::FLOAT-REGISTERS SB-VM::STACK CONSTANT SB-VM::IMMEDIATE-CONSTANT SB-VM::NOISE)"
 "(  (& (- val (>> val 28)) 7))")
(#(FBB93BA 1694A6AB 7D21904E A8F05515 BD918462)
 "(SB-VM::DESCRIPTOR-REG SB-VM::ANY-REG SB-VM::UNSIGNED-REG SB-VM::SIGNED-REG SB-VM::SAP-REG)"
 "(  (& (- val (>> val 2)) 7))")
(#(39308E0 790E4AF D2F362D 1D8EA6A4 25164A63 2C55EAF7 45334DC4 5D03F722 6EA0F9D1 7C685E1B 7E4DD5CC B38BE789 BA6C5CD5 C4AF7D37
   D36BD4C8 D70B59A6 F5B3D6E9)
 "(:NAME :DEFSTRUCT-NAME :INCLUDE :UNPARSE :TYPE= :LISP-REP :ALIEN-REP :EXTRACT-GEN :DEPOSIT-GEN :NATURALIZE-GEN :DEPORT-GEN :DEPORT-ALLOC-GEN :DEPORT-PIN-P :ARG-TN :RESULT-TN :SUBTYPEP :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 1 0 1 0 0 3 0 0 0 15 16 0 9)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(25164A63 7E4DD5CC 8D2AB8C8 97ECB0B8 B1619E90 C2E7E4AB D98B5639 F4411A60 F4EEBB87)
 "(:BITS :ALIGNMENT :SIGNED :NAME :FROM :TO :KIND :OFFSET :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 5 3 7 0 2 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(25164A63 47A8F1BE 7E4DD5CC 97ECB0B8 B1619E90 F4411A60)
 "(:BITS :ALIGNMENT :KIND :NAME :FIELDS :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 15) (>> val 16)) 7))")
(#(71A5A23 28B369A7 6855A947 7E4DD5CC 970BCC85 B1619E90 B41DF16F F4411A60)
 "(:BITS :ALIGNMENT :RESULT-TYPE :ARG-TYPES :VARARGS :STUB :CONVENTION :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 16) (>> val 26)) 7))")
(#(1BE84AA3 7E4DD5CC B1619E90 F4411A60 FDE111BA)
 "(:BITS :ALIGNMENT :ELEMENT-TYPE :DIMENSIONS :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 25)) 7))")
(#(58402903 7E4DD5CC B1619E90 C2E7E4AB EE7027A9 F4411A60 FDE111BA)
 "(:BITS :ALIGNMENT :TO :EXTERNAL-FORMAT :ELEMENT-TYPE :NOT-NULL :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 3)) 7))")
(#(58402903 7E4DD5CC C1D4C246 E7EB4C17 FCC84496)
 "(:START :END :EXTERNAL-FORMAT :NULL-TERMINATE :ALLOW-OTHER-KEYS)"
 "(  (& (>> val 7) 7))")
(#(10ACE44E 2800008B 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D35ED64 12214F00 7E4DD5CC 8458248D B16E862F ECB1338F FD11C553 FDE111BA)
 "(:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 4) (>> val 22)) 7))")
(#(12214F00 7E4DD5CC 8458248D B16E862F ECB1338F FD11C553 FDE111BA)
 "(:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 3) (>> val 27)) 7))")
(#(D35ED64 12214F00 8458248D B16E862F ECB1338F FD11C553 FDE111BA)
 "(:INITIAL-ELEMENT :INITIAL-CONTENTS :ELEMENT-TYPE :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET)"
 "(  (& (^ (>> val 3) (>> val 21)) 7))")
(#(56823859 70CB34EE D26B8158 E29480A8 E67B3C63 FF414202)
 "(LIST VECTOR SIMPLE-VECTOR STRING SIMPLE-STRING SIMPLE-BASE-STRING)"
 "(  (& (+ (>> val 3) (>> val 8)) 7))")
(#(2800008B 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(EA22CE8 7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:KEY :FROM-END :START :END :INITIAL-VALUE :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(3D6EC19 4E4CD394 7E4DD5CC A1F724C6 A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:FROM-END :TEST :TEST-NOT :START :END :COUNT :KEY :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 3) (>> val 21)) 7))")
(#(4E4CD394 7E4DD5CC A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:FROM-END :START :KEY :END :COUNT :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(3D6EC19 37E8DF0E 40CEAC91 49B323B8 7E4DD5CC A1F724C6 A256D8C6 B2B2C816 C122AEC5)
 "(:FROM-END :TEST :TEST-NOT :START1 :END1 :START2 :END2 :KEY :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 0 14 0 5 4 4)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(25164A63 606E0E3A 7E4DD5CC 8C4D859A 957AEDB3 A54A0028 AF9EE065 D8F2B7EA F0A1752E)
 "(:NAME :VARS :BLOCKS :TLF-NUMBER :ARGUMENTS :RETURNS :ENCODED-LOCS :NEXT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 0 0 4 4 4 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2800008B 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (- (>> val 1) (>> val 29)) 7))")
(#(5CA83E1 6E6889F8 7E4DD5CC A892BBBE AA8CF169)
 "(:NAMESTRING :CREATED :START-POSITIONS :PLIST :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 16)) 7))")
(#(CE71FAA 1430BAFC 25164A63 68D6D579 7E4DD5CC D6E7D73B)
 "(:NAME :SOURCE :FUN-MAP :CONTEXTS :MEMO-CELL :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 26)) 7))")
(#(F6A9212 3F88487E 58402903 6609CAA4 778123B0 7E4DD5CC A3FA5392 AE9A8F3A D692DDF5)
 "(:TRUENAME :EXTERNAL-FORMAT :PATHNAME :WRITE-DATE :FORMS :POSITIONS :SUBFORMS :STYLE-WARNING-TRACKER :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 0 0 4 0 2 7)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(6B4D7DF6 7058CBFA 7E4DD5CC BE566485 C0FB5F77 F9D0B9FF)
 "(:START-REAL-TIME :FILE-INFO :STREAM :LAST-DEFN-SOURCE-LOC :PARENT :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 12) (>> val 15)) 7))")
(#(1469032E 19627350 21BB63FF 26619DE3 3932B57B 5E27768B 5F494B7F 656564B4 668E03DD 67803F22 702B2006 7C968C45 C3C1E2DD
   C3EABF48 CBE11D68 CE38123D E67BE4DB EA8C218C)
 "(SPECIAL GLOBAL ALWAYS-BOUND TYPE FTYPE FREEZE-TYPE START-BLOCK END-BLOCK OPTIMIZE MUFFLE-CONDITIONS UNMUFFLE-CONDITIONS DISABLE-PACKAGE-LOCKS ENABLE-PACKAGE-LOCKS INLINE NOTINLINE MAYBE-INLINE DEPRECATED DECLARATION)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 1 7 13 0 1 1 7 0 7 18 0 12 25 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2E8EF95 778D875 2BEFD530 31C62284 46608E23 54D7A54A 62133B58 813DFF29 BB86DC9C EB29C836)
 "(QUOTE IF PROGN THE UNWIND-PROTECT BLOCK MULTIPLE-VALUE-PROG1 PROGV SB-C::WITH-SOURCE-FORM THE*)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 12 15 5 2 4 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1FE1ADA8 3AF8DBA9 45EA8C50 57ED033B 672AF595 7E4DD5CC A3C11751 A54A0028 CF79C550 D62E1373)
 "(:REQUIRED :OPTIONAL :REST :KEYP :KEYWORDS :ALLOWP :WILD-ARGS :RETURNS :DESIGNATOR :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 7 7 0 0 0 8 2 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(819C48B 441D6918 5EF1B3BB 7E4DD5CC B4F08349 E4E46523)
 "(:CLASS :FORMAT :COMPLEXP :LOW :HIGH :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 17)) 7))")
(#(89 B9 CD D1 D5 D9 DD)
 "(137 185 205 209 213 217 221)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 7 5)))
  (+= val #x612d0929)
  (^= val (>> val 4))
  (let ((b (& (>> val 2) #x3)))
   (let ((a (>> (u32+ val (<< val 24)) 30)))
    (^ a (aref tab b))))))")
(#(B3AD09A 10ACE44E 763F1FFB B6EC8FEB D5A4925F DCE23130)
 "(SB-VM::POSITIVE-FIXNUM FIXNUM SB-VM::SIGNED-BYTE-64 SB-VM::UNSIGNED-BYTE-63 BIGNUM INTEGER)"
 "(  (& (- (>> val 1) (>> val 14)) 7))")
(#(2800008B 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(3539E037 398CB647 6892DBB7 728F28C5 92586CF4 D692DDF5)
 "(COMPLEX FUNCTION SYSTEM-AREA-POINTER WEAK-POINTER PATHNAME LOGICAL-PATHNAME)"
 "(  (& (- val (>> val 14)) 7))")
(#(790E4AF 73E1E633 7A03BEDF 8E8B60F0 9D81B113 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "(:CONC-NAME :CONSTRUCTOR :COPIER :PREDICATE :INCLUDE :PRINT-FUNCTION :PRINT-OBJECT :TYPE :NAMED :INITIAL-OFFSET :PURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 2 0 11 0 0 0 8 2)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(790E4AF 73E1E633 8E8B60F0 9D81B113 C3EABF48 C65B82DD C97CFF28 D8C1EE02 F11FE118 FBADBE01)
 "(:CONC-NAME :CONSTRUCTOR :COPIER :PREDICATE :INCLUDE :PRINT-FUNCTION :PRINT-OBJECT :TYPE :INITIAL-OFFSET :PURE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 13 5 0 2 3 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(A35FC90 54A4D084 65F63C89 6892DBB7 B6F1B432 D692DDF5 F9AC02F3)
 "(ANSI-STREAM FD-STREAM SB-IMPL::STRING-INPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::FILL-POINTER-OUTPUT-STREAM PATHNAME LOGICAL-PATHNAME)"
 "(  (& (^ (>> val 2) (>> val 7)) 7))")
(#(A35FC90 54A4D084 65F63C89 B6F1B432 F9AC02F3)
 "(ANSI-STREAM FD-STREAM SB-IMPL::STRING-INPUT-STREAM SB-IMPL::STRING-OUTPUT-STREAM SB-IMPL::FILL-POINTER-OUTPUT-STREAM)"
 "(  (& val 7))")
(#(117B1754 5CE6DF8E 7E4DD5CC 9A7217E8 A3E1D5DD A5BB6459 A6B44606)
 "(:CLASS-NAME :SUPERCLASS-NAME :METACLASS-NAME :DD-TYPE :METACLASS-CONSTRUCTOR :SLOT-NAMES :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 19)) 7))")
(#(9D37842 DDAD4B3 1B8EF4AF 7E4DD5CC 80C55064 C029BD69 D7B83BC9 FCDE4902)
 "(:DERIVE-TYPE :OPTIMIZER :RESULT-ARG :OVERWRITE-FNDB-SILENTLY :CALL-TYPE-DERIVER :ANNOTATION :FOLDER :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 3) (>> val 26)) 7))")
(#(3AF6BB28 7E4DD5CC A256D8C6 A3C11751 A54A0028)
 "(:POSITIONAL :REST :KEY :RETURNS :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 26)) 7))")
(#(C8B9AD5 792DC15C 7E4DD5CC 856E29CB B1085B75)
 "(:ARGUMENT-TEST :RESULT-TEST :LOSSAGE-FUN :UNWINNAGE-FUN :ALLOW-OTHER-KEYS)"
 "(  (& (>> val 21) 7))")
(#(7E4DD5CC C7E8085B E7FC6B6E ED178322 F3FC2F5A)
 "(:MIN-ARGS :MAX-ARGS :TYPES :KEYS :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 4) (>> val 28)) 7))")
(#(25164A63 672AF595 7E4DD5CC E6101645 E7FC6B6E)
 "(:NAME :POSITION :TYPES :ALLOWP :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 6)) 7))")
(#(24049169 792DC15C 7E4DD5CC 856E29CB E8CDDE26)
 "(:REALLY-ASSERT :LOSSAGE-FUN :UNWINNAGE-FUN :WHERE :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 2) (>> val 18)) 7))")
(#(7E07E4B9 7E4DD5CC 931F2DBC C3EABF48 C9A0837E CED537B8)
 "(:INFO :UNKNOWN-KEYS-FUN :DEFINED-HERE :ASSERTED-TYPE :TYPE :ALLOW-OTHER-KEYS)"
 "(  (& (>> val 19) 7))")
(#(483C9C82 76A22E5D BABC0674 D05C85DE D58C389F DED271A4)
 "(SB-C::MODIFYING TYPE-SPECIFIER SB-C::PROPER-LIST SB-C::PROPER-SEQUENCE SB-C::PROPER-OR-CIRCULAR-LIST SB-C::PROPER-OR-DOTTED-LIST)"
 "(  (& (^ (>> val 15) (>> val 21)) 7))")
(#(1000 2000 4000 6000 8000 A000 C000)
 "(8192 16384 24576 32768 49152 40960 4096)"
 "(  (& (>> val 13) 7))")
(#(2BEFD530 8767F152 DEEE6443 E2AA03BE F987A176)
 "(SET PROGV COMPARE-AND-SWAP DEFCONSTANT MAKUNBOUND)"
 "(  (& (^ val (>> val 7)) 7))")
(#(50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6)
 "(= > >= < <=)"
 "(  (& (- (>> val 5) (>> val 28)) 7))")
(#(2F67631E 379C2323 39DB0A54 5580C0AD 7E4DD5CC 867ECFE7)
 "(:TRAPS :ROUNDING-MODE :CURRENT-EXCEPTIONS :ACCRUED-EXCEPTIONS :FAST-MODE :ALLOW-OTHER-KEYS)"
 "(  (& (- val (>> val 14)) 7))")
(#(52A8EB8 624BF45 730F78B C88666B 1B3DFE3D 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 58402903 5B62A78D
   5C9A772E 6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264 9D0BE578
   9DA92895 A45DDC19 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F578E04D F81CA1A5 F8751011 FDE111BA)
 "(:IN-BUFFER :CIN-BUFFER :CSIZE-BUFFER :IN-INDEX :IN :BIN :N-BIN :COUT :BOUT :SOUT :MISC :INPUT-CHAR-POS :NAME :FILE :ORIGINAL :DELETE-ORIGINAL :ELEMENT-SIZE :ELEMENT-TYPE :ELEMENT-MODE :FD :FD-TYPE :BUFFERING :DUAL-CHANNEL-P :OUTPUT-COLUMN :LISTEN :SERVE-EVENTS :INSTEAD :IBUF :EOF-FORCED-P :OBUF :OUTPUT-QUEUE :HANDLER :TIMEOUT :PATHNAME :EXTERNAL-FORMAT :CHAR-SIZE :REPLACEMENT :OUTPUT-BYTES :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 51 9 0 9 9 0 0 0 12 46 28 12 9 19 0 0 60 41 26 16 0 0 10 30 49 0 0 59 12 44 0)))
  (let ((b (& val #x1f)))
   (let ((a (>> val 27)))
    (^ a (aref tab b))))))")
(#(52A8EB8 624BF45 730F78B C88666B 1B3DFE3D 25164A63 3AAC5790 3FFDC7CE 4279C74A 446F7404 4AE6501D 527D1537 551E0734 58402903
   5B62A78D 5C9A772E 6251F97E 6B412252 762F2F3A 7E4DD5CC 80727F9A 81DED042 8AB1F903 8C47C341 90E4F255 93D17E93 97B72264
   9B5DD377 9D0BE578 9DA92895 A45DDC19 AA990F75 CC82EB09 D2743454 D692DDF5 D7A26DBC E3FCE013 E4774714 F29C1EED F578E04D
   F61FC563 F81CA1A5 F8751011 FDE111BA)
 "(:IN-BUFFER :CIN-BUFFER :CSIZE-BUFFER :IN-INDEX :IN :BIN :N-BIN :COUT :BOUT :SOUT :MISC :INPUT-CHAR-POS :NAME :FILE :ORIGINAL :DELETE-ORIGINAL :ELEMENT-SIZE :ELEMENT-TYPE :ELEMENT-MODE :FD :FD-TYPE :BUFFERING :DUAL-CHANNEL-P :OUTPUT-COLUMN :LISTEN :SERVE-EVENTS :INSTEAD :IBUF :EOF-FORCED-P :OBUF :OUTPUT-QUEUE :HANDLER :TIMEOUT :PATHNAME :EXTERNAL-FORMAT :CHAR-SIZE :REPLACEMENT :OUTPUT-BYTES :OBSERVER :NEWLINES :LAST-NEWLINE :FORM-START-BYTE-POS :FORM-START-CHAR-POS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((32) (unsigned-byte 8) 0 9 9 28 0 19 22 10 0 0 0 0 0 7 9 19 51 28 22 9 51 60 0 0 46 37 36 32 0 9 34 62)))
  (let ((b (& (>> val 2) #x1f)))
   (let ((a (>> (<< val 9) 27)))
    (^ a (aref tab b))))))")
(#(5151B44 5C4485D 94A93FE 10D1C025 2159100F 414B99B6 4ACE6E2B 5C93F3DF 61E8F31D 7E4DD5CC 812F2FD4 8AB1F903 962F5FA8 B68BF8F6
   C25D7D5D C4CF82B5 C6EFD6AB)
 "(:NAMES :NEWLINE-VARIANT :DEFAULT-REPLACEMENT-CHARACTER :REPLACEMENT :READ-N-CHARS-FUN :READ-CHAR-FUN :WRITE-N-BYTES-FUN :WRITE-CHAR-NONE-BUFFERED-FUN :WRITE-CHAR-LINE-BUFFERED-FUN :WRITE-CHAR-FULL-BUFFERED-FUN :RESYNC-FUN :BYTES-FOR-CHAR-FUN :READ-C-STRING-FUN :WRITE-C-STRING-FUN :OCTETS-TO-STRING-FUN :STRING-TO-OCTETS-FUN :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 15 13 15 0 0 3 0 0 13 5 0 16 13)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(624BF45 1B3DFE3D 25164A63 3FFDC7CE 58402903 5B62A78D 5C9A772E 7DB72BC4 7E4DD5CC 891C1715 90E4F255 BA514D02 D692DDF5 D8114161
   E4E46523 F81CA1A5 FDE111BA)
 "(:CLASS :INPUT :OUTPUT :ELEMENT-TYPE :BUFFERING :EXTERNAL-FORMAT :SERVE-EVENTS :TIMEOUT :FILE :ORIGINAL :DELETE-ORIGINAL :PATHNAME :INPUT-BUFFER-P :DUAL-CHANNEL-P :NAME :AUTO-CLOSE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 12 0 0 1 0 0 0 0 0 31 0 3 6 15 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(2800008B 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(DC1A38C 58402903 7E4DD5CC E32878E5 E4E46523 ECEAC1AA FDE111BA)
 "(:DIRECTION :ELEMENT-TYPE :IF-EXISTS :IF-DOES-NOT-EXIST :EXTERNAL-FORMAT :CLASS :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 3) (>> val 4)) 7))")
(#(0 1 5 6 7 8 F)
 "(6 5 1 15 0 7 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 7 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(89D3B94 26AF6E38 2839545A 4039E15B 48502FB7 50269B22 6E987445 7AFAD4FD 8BCDD04E A76F484B A810906F C5D9479F C8A25DB2 D90A1076
   E45D7F1B E96A5D48)
 "(T STRUCTURE-OBJECT CONDITION SB-C:DEFINITION-SOURCE-LOCATION SB-C::DEBUG-INFO SB-C::COMPILED-DEBUG-INFO SB-C::DEBUG-SOURCE DEFSTRUCT-DESCRIPTION DEFSTRUCT-SLOT-DESCRIPTION SB-C::DEBUG-FUN SB-C::COMPILED-DEBUG-FUN SB-C::COMPILED-DEBUG-FUN-OPTIONAL SB-C::COMPILED-DEBUG-FUN-MORE SB-C::COMPILED-DEBUG-FUN-EXTERNAL SB-C::COMPILED-DEBUG-FUN-TOPLEVEL SB-C::COMPILED-DEBUG-FUN-CLEANUP)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 12 12 4 12 11 5)))
  (let ((b (& (>> val 9) #x7)))
   (let ((a (>> (<< val 1) 29)))
    (^ a (aref tab b))))))")
(#(68781F40 6E6889F8 7E4DD5CC D692DDF5 F58C5428)
 "(:PATHNAME :NAMESTRING :HANDLE :DONT-SAVE :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 13)) 7))")
(#(3CA58D19 47A8F1BE C3EABF48 C67DC11A FE5F3DA8)
 "(:SIGN-EXTEND :PREFILTER :FIELD :FIELDS :TYPE)"
 "(  (& (+ (>> val 0) (>> val 3) (>> val 14)) 7))")
(#(B414EE0 3CA58D19 47A8F1BE 7E4DD5CC 8A6154E7 C3EABF48 C67DC11A CA5014D5 FE5F3DA8)
 "(:VALUE :TYPE :PREFILTER :PRINTER :SIGN-EXTEND :USE-LABEL :FIELD :FIELDS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 7 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(28ECAC6D 88683046 951240CA F22AA4B8 F5732BF5)
 "(:RAW :SIGN-EXTENDED :FILTERED :NUMERIC :FINAL)"
 "(  (& (>> val 10) 7))")
(#(16434381 1EB5B08B 3A4AABC8 63292B7D 66CD34E5 7464E610 7E4DD5CC 91F6BD42 965734A8 A0000111 A9CE8124 B1619E90 B3CD2755
   BB57FB02 C0649A2F C6CB3D00 C84A0FBF E90C52DA F3C0A986 F40C4257 F457A4B5 F91217E6 F930FAC1 F979E0CD FAE2093D)
 "(:BUFFER :ENCODER-STATE :RUN-SCHEDULER :CURRENT-POSN :%CURRENT-INDEX :ANNOTATIONS :ALIGNMENT-ANNOTATIONS :LAST-ANNOTATION :ALIGNMENT :HEADER-SKEW :SYNC-POSN :ORIGIN :FINAL-POSN :FINAL-INDEX :POSTITS :INST-NUMBER :READERS :WRITERS :BRANCH-COUNTDOWN :EMITTABLE-INSTS-SSET :QUEUED-BRANCHES :DELAYED :EMITTABLE-INSTS-QUEUE :FIXUP-NOTES :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 7 31 16 13 0 10 31 0 0 30 14 16 0 22 0 0)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(1391902F 3D49A6BE 5A162DF6 7E4DD5CC 9610B3E8 9DA85EBA C09BD6A3 DC0014B6 DE2B95D6 DF9931EA EEA3DE9A F598E227 FDAA0EC5)
 "(:DATA-SECTION :CODE-SECTION :ELSEWHERE-SECTION :DATA-ORIGIN-LABEL :TEXT-ORIGIN-LABEL :ELSEWHERE-LABEL :INTER-FUNCTION-PADDING :CONSTANT-TABLE :CONSTANT-VECTOR :ALLOC-POINTS :INDIRECTION-TABLE :TRACING-STATE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 12 0 5 9 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(37F08BCC 5B94F729 6A9EA23E 8BCF98C8 9AC82294 AE544568 C1AF69E8 CA5014D5 EB165265)
 "(:EMITTER :DECLARE :ATTRIBUTES :COST :DEPENDENCIES :DELAY :PINNED :VOP-VAR :PRINTER)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 1 0 0 3 7 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(327B6CF C6956F1 12493593 29B9C94B 3742620B 4039E15B 6ABE0B3A 6D11980C 7058CBFA 7E4DD5CC C3D4E5F4 C6968950 F1C23895 F62855F1
   FA30A102)
 "(:STREAM :VARINT-BUF :SIMILAR-TABLE :EQ-TABLE :INSTANCE-ID-TABLE :STRING=-TABLE :TABLE-FREE :PACKAGES :ENTRY-TABLE :PATCH-TABLE :DEBUG-INFO :CIRCULARITY-TABLE :VALID-STRUCTURES :SAVED-SLOT-NAMES :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 10 0 12 4 0 0 15 0)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(B414EE0 1473BF8C 7E4DD5CC 96679819 C3EABF48 FE253C4F FE4E8E9A)
 "(:TYPE :OBJECT :INDEX :SLOT-NAME :VALUE :ENCLOSING-OBJECT :ALLOW-OTHER-KEYS)"
 "(  (& (- val (>> val 23)) 7))")
(#(50CD4DF 32C229AB 7FD087C8 9B0ED14E D5723A9D E1B4FE02)
 "(:CONSTANT :ENTRY :LOAD-TIME-VALUE :FDEFINITION :KNOWN-FUN :COVERAGE-MARKS)"
 "(  (& (+ (>> val 1) (>> val 23)) 7))")
(#(7F188EA 14D62A9E 1D2A7BC0 384E6267 5C2FB790 7B72109D 7E4DD5CC 9DFBD609 BDE7A1BC C915AED8 E3105BAD E68A8E38 F8CFBF41)
 "(:%ENCLOSING-SOURCE :%SOURCE :ORIGINAL-FORM :ORIGINAL-FORM-STRING :CONTEXT :FILE-NAME :FILE-POSITION :PATH :FORMAT-ARGS :INITIALIZED :ORIGINAL-SOURCE-PATH :HANDLED-CONDITIONS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 4 0 0 15 11 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(35387DE 18795B4E 7E4DD5CC 7F4CC5C8 A5137BCD)
 "(:OVERRIDE :POLICY :SOURCE-PLIST :SOURCE-NAMESTRING :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 4)) 7))")
(#(27B84B13 2EB42ED9 440E7FC1 46608E23 8CBE95A0)
 "(EVAL-WHEN MACROLET SYMBOL-MACROLET LOCALLY PROGN)"
 "(  (& (^ val (>> val 29)) 7))")
(#(699B8EF 21E5BB8C 56591B24 58402903 7E4DD5CC 941FDD6C A74C5AA3 AAC62EE3 BA994C49 CC8B1AC7)
 "(:OUTPUT-FILE :VERBOSE :PRINT :EXTERNAL-FORMAT :PROGRESS :TRACE-FILE :BLOCK-COMPILE :ENTRY-POINTS :EMIT-CFASL :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 13 7 0 0 5)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(19627350 26619DE3 3269DBE1 3932B57B 47F582BB 49A5AA56 4E32CBF3 5E27768B 5F494B7F 656564B4 668E03DD 7C968C45 7D224C44
   9E895E42 A07D6845 AF060102 C3C1E2DD C3EABF48 CE38123D)
 "(TYPE IGNORE IGNORABLE SPECIAL FTYPE INLINE NOTINLINE MAYBE-INLINE SB-C::NO-COMPILER-MACRO OPTIMIZE MUFFLE-CONDITIONS UNMUFFLE-CONDITIONS DYNAMIC-EXTENT DISABLE-PACKAGE-LOCKS ENABLE-PACKAGE-LOCKS SB-C:FLUSHABLE SB-C::CURRENT-DEFMETHOD SB-C::NO-CONSTRAINTS SB-C::CONSTANT-VALUE)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 3 14 13 27 0 8 0 7 0 0 0 0 3 0 27)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(543DAB03 5A66BA35 5EB4DF10 7E4DD5CC BDE7A1BC)
 "(:LEXENV :BINDING-FORM-P :CONTEXT :ALLOW-LAMBDA-LIST :ALLOW-OTHER-KEYS)"
 "(  (& (^ val (>> val 5)) 7))")
(#(1469032E 19627350 3932B57B 656564B4 67803F22 C3C1E2DD C3EABF48 CE38123D E67BE4DB)
 "(SPECIAL GLOBAL START-BLOCK END-BLOCK FTYPE TYPE INLINE NOTINLINE MAYBE-INLINE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 0 2 3 0 0)))
  (let ((b (& (>> val 17) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(4A1417AD 7E4DD5CC A48290A3 A7672D4A AAA60979 C13D2E32 C1463E8D CC857E70 E0C1F37E)
 "(:AUX-VARS :AUX-VALS :SOURCE-NAME :DEBUG-NAME :NOTE-LEXICAL-BINDINGS :POST-BINDING-LEXENV :LOCAL-POLICY :VALUE-SOURCE-FORMS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 5 0 4 7 5 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(35387DE 14D62A9E 24D43549 5C8719A1 606E0E3A 76D86EE5 7E4DD5CC 8612A6FE 998E7C29 A5860C2B AF060102 B7DA6CE4 C0FB5F77 F0A1752E
   FBDE7A7C)
 "(:DEFAULT :FUNS :VARS :BLOCKS :TAGS :TYPE-RESTRICTIONS :LAMBDA :CLEANUP :HANDLED-CONDITIONS :DISABLED-PACKAGE-LOCKS :POLICY :USER-DATA :FLUSHABLE :PARENT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 5 2 12 14 12 12 4 0)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(BA54B74 2800008B 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(3C44DAA8 8A3BE106 A3C11751 A872A12A CF79C550)
 "(:KEYWORD :REST :OPTIONAL :MORE-CONTEXT :MORE-COUNT)"
 "(  (& (^ (>> val 1) (>> val 27)) 7))")
(#(2800008B 6F4E2B12 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(3D6EC19 A1F724C6 A256D8C6 C122AEC5 C1D4C246 FCC84496)
 "(:FROM-END :START :END :KEY :TEST :TEST-NOT)"
 "(  (& (+ (>> val 0) (>> val 10) (>> val 13)) 7))")
(#(43268980 50B431CB 6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557 EC047C78)
 "(%TYPEP SB-C::%INSTANCE-TYPEP EQ EQL < > <= >= =)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 2 0 12 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(TYPEP EQL < > <= >= =)"
 "(  (& (- val (>> val 28)) 7))")
(#(3CEB35C3 50B431CB 6C16ABD3 834BCA78 8D437217 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(CHAR= CHAR-EQUAL EQ EQL = < > <= >=)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 4 2 2)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(< <= EQ EQL = >)"
 "(  (& (- (>> val 1) (>> val 28)) 7))")
(#(50B431CB 6C16ABD3 834BCA78 934E6A73 A1148EC6 E8DC3557)
 "(> >= EQ EQL = <)"
 "(  (& (^ (>> val 3) (>> val 30)) 7))")
(#(6C16ABD3 834BCA78 8F6A8805 934E6A73 E8DC3557)
 "(< <= EQ EQL =)"
 "(  (& (+ (>> val 3) (>> val 7)) 7))")
(#(50B431CB 6C16ABD3 934E6A73 A1148EC6 E8DC3557)
 "(> >= EQ EQL =)"
 "(  (& (^ (>> val 3) (>> val 30)) 7))")
(#(30A8A35 714FAFD7 7E4DD5CC AD965BF0 B0E10B3A)
 "(:OPERATOR :CONSEQUENT :ALTERNATIVE :AMOUNT :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 10) (>> val 27)) 7))")
(#(50B431CB 6C16ABD3 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557)
 "(= EQ EQL < > <= >=)"
 "(  (& (^ val (>> val 22)) 7))")
(#(1365E54E 25164A63 6636ACD8 7E4DD5CC 95B7F751 EE4BBFD9)
 "(:NAME :WIDTH :SIGNEDP :LAMBDA-LIST :PROTOTYPE :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 2) (>> val 18)) 7))")
(#(DE95B1 2681DDA1 2A70C0ED 4D74A788 7773A213 7CBB0DFC C76F980E CD735EFC)
 "(SB-C::^= SB-C::+= SB-C::& SB-C::^ SB-C::U32+ SB-C::U32- SB-C::<< SB-C::>>)"
 "(  (& (+ (>> val 0) (>> val 1) (>> val 29)) 7))")
(#(26AF6E38 270E512A 56E77385 5E585674 7E4DD5CC 7F2D8268 91A41004 BFD62B43 C65B82DD DD5968E1 FE4E8E9A)
 "(:OBJECT :SAP-MAKER :LENGTH :VIRTUAL-LOCATION :STORAGE-INFO :CODE :CODE-CALLABLES :INITIAL-OFFSET :HOOKS :DEBUG-FUN :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 11 15 7 2 0 3 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(64688A38 87F4227F 8D027A6B B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :OWORD :HWORD)"
 "(  (& (+ (>> val 7) (>> val 11)) 7))")
(#(118F10F5 5DB2EF1B 64688A38 7090AB0B 71A4657D 87F4227F 8D027A6B 965CD62A 9CB7F4E3 A0FAB3A5 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :OWORD :SSE :HWORD :AVX2 :SINGLE-FLOAT :DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT :COMPLEX-DOUBLE-FLOAT :JUMP-TABLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 0 2 12 12 11)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(25A587A6 326AE117 3A0738E7 6043C540 80CE8459 BE9931C5)
 "(:S :NS :NE :E :NZ :Z)"
 "(  (& (+ val (>> val 3)) 7))")
(#(769ED64 38AE4883 7E4DD5CC 8757D4AA A8249CA2 D13FCF75 E3B174F1 F3C3AB71)
 "(:REMAINING-BYTES :L :OPCODE-PREFIX :W :VVVV :IS4 :VM :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 10) (>> val 30)) 7))")
(#(20CCCC7E 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:QWORD :DWORD :WORD :BYTE :SIZED)"
 "(  (& (^ (>> val 5) (>> val 19)) 7))")
(#(38AE4883 3B085CC6 747DC6CD 7E4DD5CC 9DFF8821 A8249CA2 CA5014D5 D46A8C39 F3C3AB71)
 "(:MORE-FIELDS :PRINTER :OPCODE-PREFIX :REG-MEM-SIZE :XMMREG-MEM-SIZE :W :L :NDS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 13 0 0 3 3 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(C971158 1BBBA6D2 4153B09A 488BFA28 7E4DD5CC A641503F C447D681)
 "(:EXCEPT :DROP-THROUGH :LOAD-WIDETAG :COMPUTE-TEMP :VALUE-TN-REF :IMMEDIATE-TESTED :ALLOW-OTHER-KEYS)"
 "(  (& (>> val 18) 7))")
(#(1F11E2F 321E4B7B 7A4EAC07 960CBBDF D1979E3F)
 "(SB-VM::INSTANCE-INDEX-REF-C %RAW-INSTANCE-REF/WORD %RAW-INSTANCE-REF/SIGNED-WORD SLOT SB-VM::DATA-VECTOR-REF-WITH-OFFSET/SIMPLE-VECTOR-C)"
 "(  (& (- (>> val 2) (>> val 9)) 7))")
(#(10ACE44E 74748736 965CD62A 971A1DF1 A0FAB3A5 A2195041 B34F601E)
 "(INTEGER RATIONAL OR SINGLE-FLOAT DOUBLE-FLOAT FLOAT REAL)"
 "(  (& (^ (>> val 9) (>> val 10)) 7))")
(#(7BE111A 7D24BA2D 7E4DD5CC 9DFE1B14 FE1CE099)
 "(:RESULT :INTO :BODY :FAST :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 6) (>> val 29)) 7))")
(#(1FCB53EC 43ECD685 785DD024 864566AF CA61C353 F3815E9C)
 "(ASSOC-IF ASSOC-IF-NOT RASSOC-IF RASSOC-IF-NOT MEMBER-IF MEMBER-IF-NOT)"
 "(  (& (^ val (>> val 7)) 7))")
(#(5DB2EF1B 7480CF81 832FC7B8 965CD62A A0FAB3A5 F4411A60)
 "(:TAGGED :CHAR :BITS :SINGLE-FLOAT :DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(7C678985 965CD62A A0FAB3A5 C8A25DB2 CD22F006)
 "(DOUBLE-FLOAT SINGLE-FLOAT T CHARACTER BASE-CHAR)"
 "(  (& (- (>> val 6) (>> val 29)) 7))")
(#(11 1D 25 29 31 6804CAE9)
 "(UNBOXED-ARRAY 17 49 29 37 41)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 4 5)))
  (+= val #xc8b651d2)
  (^= val (>> val 16))
  (+= val (<< val 8))
  (^= val (>> val 4))
  (let ((b (& (>> val 3) #x3)))
   (let ((a (>> (u32+ val (<< val 11)) 30)))
    (^ a (aref tab b))))))")
(#(B3AD09A 5DB2EF1B 71A4657D 728F28C5 965CD62A A0FAB3A5 D5A4925F FB12CF33)
 "(DOUBLE-FLOAT SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT SB-VM::SIGNED-BYTE-64 SB-VM::UNSIGNED-BYTE-64 SB-VM::UNSIGNED-BYTE-63 SYSTEM-AREA-POINTER)"
 "(  (& (^ (>> val 1) (>> val 21)) 7))")
(#(71A5A23 140C6C3A 7A372C76 89072FE6 C7E7B222)
 "(:GUARD :ARG-CHECK :ARG-TYPES :CONDITIONAL :RESULT-TYPES)"
 "(  (& (+ (>> val 7) (>> val 23)) 7))")
(#(778D875 31C62284 4E504BCF 7D224C44 D7979E55)
 "(:BLOCK :TAGBODY :CATCH :UNWIND-PROTECT :DYNAMIC-EXTENT)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(5DB2EF1B 71A4657D 965CD62A A0FAB3A5 C8A25DB2 E0A39FB8 FEAFF6CF)
 "(T WORD SB-VM:SIGNED-WORD SINGLE-FLOAT DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT)"
 "(  (& (^ (>> val 13) (>> val 20)) 7))")
(#(89 8D 91 95 99 9D A1 A5 A9 AD B1 B5 B9 BD C1 C5 C9 CD D1 D5 D9 DD E1 E5)
 "(225 229 209 213 141 145 149 153 157 161 165 169 173 177 181 185 189 193 197 201 205 217 221 137)"
 "((let ((tab #a((16) (unsigned-byte 8) 31 24 0 13 0 13 0 13 1 12 16 22 16 18 21 22)))
  (let ((b (& (>> val 2) #xf)))
   (let ((a (>> (<< val 25) 28)))
    (^ a (aref tab b))))))")
(#(882F110 32FCC81D 3325A30C B7E73A9B ECB1338F FB6863DF)
 "(SB-VM::DATA FILL-POINTER SB-VM::ELEMENTS SB-VM::DISPLACEMENT SB-VM::DISPLACED-P SB-VM::DISPLACED-FROM)"
 "(  (& (- (>> val 6) (>> val 26)) 7))")
(#(BA54B74 2800008B 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 9 5 3 7 0 2)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(1F774E7 50B8430 1CDB5808 5FB17392 7E4DD5CC DFC58C8E FBD0AE9C FFE04C9B)
 "(:TIMEZONE :STYLE :DATE-FIRST :PRINT-SECONDS :PRINT-MERIDIAN :PRINT-TIMEZONE :PRINT-WEEKDAY :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 14) (>> val 25)) 7))")
(#(BD8A937 50CA06EC 5DB2EF1B 71A4657D 7499061E 965CD62A A0FAB3A5 B9BCE917 CC2370C1 CF05BC65)
 "(SINGLE-FLOAT DOUBLE-FLOAT COMPLEX-SINGLE-FLOAT COMPLEX-DOUBLE-FLOAT SIMD-PACK-INT SIMD-PACK-SINGLE SIMD-PACK-DOUBLE SIMD-PACK-256-INT SIMD-PACK-256-SINGLE SIMD-PACK-256-DOUBLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 14 13 0 5 0 3 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(32C229AB 3CB93D68 67803F22 97B016E6 CE38123D)
 "(:SPECIAL :GLOBAL :CONSTANT :UNKNOWN :ALIEN)"
 "(  (& (^ val (>> val 7)) 7))")
(#(27B84B13 2EB42ED9 440E7FC1 46608E23 62133B58 659A1BF7 8CBE95A0 92586CF4 AD7441FF EB29C836 F6075C4B)
 "(FUNCTION QUOTE SETQ PROGN EVAL-WHEN LOCALLY MACROLET SYMBOL-MACROLET IF LET LET*)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 0 12 0 2 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(56FA179 18C4A9F3 1F2EC83F 7E4DD5CC 9C5536A1 AD05849D B1190485 C7165A2E C841F022 D3C39B63 DA1BC488 FCACAE1D)
 "(:REAL-TIME-MS :USER-RUN-TIME-US :SYSTEM-RUN-TIME-US :GC-RUN-TIME-MS :GC-REAL-TIME-MS :PROCESSOR-CYCLES :EVAL-CALLS :LAMBDAS-CONVERTED :PAGE-FAULTS :BYTES-CONSED :ABORTED :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 11 0 0 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 43F1ADE4 63880A60 74643D7B 7E4DD5CC 9B206D3E B8D43E7C D8607BE6)
 "(:TEST :SIZE :REHASH-SIZE :REHASH-THRESHOLD :HASH-FUNCTION :WEAKNESS :SYNCHRONIZED :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 9) (>> val 28)) 7))")
(#(2800008B 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(3D6EC19 7E4DD5CC 8ED3F6F5 9D81B113 EB66E66D)
 "(:CONSTRUCTOR :KEY-TYPE :SORT :TEST :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 5)) 7))")
(#(2 3 6 8 C E)
 "(8 6 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 5 8 C E)
 "(8 5 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 9 C E)
 "(9 8 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 1)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(2 3 8 C E)
 "(8 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 3 0 4 1)))
  (let ((b (& (>> val 1) #x3)))
   (let ((a (>> (<< val 31) 30)))
    (^ a (aref tab b))))))")
(#(2 3 5 C E)
 "(5 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 2)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(44 45 46 4C 52 53)
 "(#\\E #\\S #\\F #\\D #\\L #\\R)"
 "((let ((tab #a((4) (unsigned-byte 8) 4 3 0 3)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 27) 30)))
    (^ a (aref tab b))))))")
(#(10A4844C 7E4DD5CC AF616594 C1D4C246 FCC84496)
 "(:START :END :RADIX :JUNK-ALLOWED :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 3) (>> val 25)) 7))")
(#(3146EB3 1226EEA9 2F740446 44455F7E 48131EF9 4B94156D 6A1DA79D 7058CBFA 7E4DD5CC 7F2D8268 85DD5A2F AF616594 B734105A C18A23D8
   CA789368 CB0F3862 E29D7651 F4D1B149)
 "(:STREAM :ESCAPE :RADIX :BASE :CIRCLE :PRETTY :LEVEL :LENGTH :CASE :ARRAY :GENSYM :READABLY :RIGHT-MARGIN :MISER-WIDTH :LINES :PPRINT-DISPATCH :SUPPRESS-ERRORS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 1 0 24 1 0 9 0 0 0 13 0 15 7 12 31)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(3146EB3 1226EEA9 2F740446 44455F7E 48131EF9 4B94156D 6A1DA79D 7E4DD5CC 7F2D8268 85DD5A2F AF616594 B734105A C18A23D8 CA789368
   CB0F3862 E29D7651 F4D1B149)
 "(:ESCAPE :RADIX :BASE :CIRCLE :PRETTY :LEVEL :LENGTH :CASE :ARRAY :GENSYM :READABLY :RIGHT-MARGIN :MISER-WIDTH :LINES :PPRINT-DISPATCH :SUPPRESS-ERRORS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 0 13 1 0 9 0 0 0 7 0 13 7 15 30)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(0 2800008B 5B8CF706 C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (+ val (>> val 18)) 7))")
(#(201B535C 7C9BA40B 7E4DD5CC 97ECB0B8 A40E62B2)
 "(:POSN :DEPTH :SECTION-END :KIND :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 10)) 7))")
(#(D581AC8 2F89992E 7E4DD5CC 851D3580 AD34CD60 E9B91675 EC5883B1)
 "(:START-COLUMN :SECTION-COLUMN :PER-LINE-PREFIX-END :PREFIX-LENGTH :SUFFIX-LENGTH :SECTION-START-LINE :ALLOW-OTHER-KEYS)"
 "(  (& (- val (>> val 29)) 7))")
(#(39042B8 201B535C 48F762E1 7C9BA40B 7E4DD5CC 9EE3654F A40E62B2)
 "(:POSN :DEPTH :SECTION-END :BLOCK-END :PREFIX :SUFFIX :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 15)) 7))")
(#(1064681C 201B535C 3B6BD87E 5D8EB91C 6403DABF 7E4DD5CC)
 "(:POSN :SECTIONP :RELATIVEP :COLNUM :COLINC :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 27)) 7))")
(#(42CFF1D7 50A623EF 5545367C AFB09C7B DB03D182)
 "(&OPTIONAL &AUX &REST &BODY &KEY)"
 "(  (& (- val (>> val 17)) 7))")
(#(3B1994A4 5CB06058 7E4DD5CC 7F2D8268 BA14BD32 C9A0837E EB1030AC F3301F6E)
 "(:DEPTHOID :LENGTH :FLAGS :INHERITS :INFO :BITMAP :INVALID :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 3) (>> val 25)) 7))")
(#(0 1 7 8 F)
 "(0 1 7 8 15)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 4 0 0)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(57CE081 6072329 25164A63 2975D415 3F3E40B1 5FCFD0CF 73D255A2 7C685E1B 7D95163D 7E4DD5CC 7FB184E7 A63B0E66 E5AD1C0D F274CEA5
   F4059741 FDFC2C5D)
 "(:PARSE :PARSE-NATIVE :UNPARSE :UNPARSE-NATIVE :UNPARSE-HOST :UNPARSE-DIRECTORY :UNPARSE-FILE :UNPARSE-ENOUGH :UNPARSE-DIRECTORY-SEPARATOR :SIMPLIFY-NAMESTRING :CUSTOMARY-CASE :NAME-HASH :NAME :TRANSLATIONS :CANON-TRANSLS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 14 5 0 8 15 1)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(90EDB7B 1FDE90F6 25164A63 44455F7E 50F5AB12 7E4DD5CC B800E558 C3EABF48 CC9ABF76)
 "(:HOST :DEVICE :DIRECTORY :NAME :TYPE :VERSION :DEFAULTS :CASE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 2 1 0 2 7 0)))
  (let ((b (>> val 29)))
   (let ((a (& val #x7)))
    (^ a (aref tab b))))))")
(#(10A4844C 7E4DD5CC 9CF25BBD C1D4C246 FCC84496)
 "(:START :END :JUNK-ALLOWED :AS-DIRECTORY :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 2) (>> val 6)) 7))")
(#(6072329 2975D415 5FCFD0CF 73D255A2 7C685E1B 7D95163D 7E4DD5CC A63B0E66 E5AD1C0D F274CEA5 F4059741 FDFC2C5D)
 "(:PARSE :PARSE-NATIVE :UNPARSE :UNPARSE-NATIVE :UNPARSE-HOST :UNPARSE-DIRECTORY :UNPARSE-FILE :UNPARSE-ENOUGH :UNPARSE-DIRECTORY-SEPARATOR :SIMPLIFY-NAMESTRING :CUSTOMARY-CASE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 2 12 2 13 0 7)))
  (let ((b (& (>> val 3) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(73AD370 361A9014 5AEFDBD2 76FA0F56 77EF5B0F)
 "(:ABSOLUTE :WILD-INFERIORS :RELATIVE :UP :BACK)"
 "(  (& (- val (>> val 7)) 7))")
(#(1222895C 344F26E9 7E4DD5CC DA510BD4 DDD840D5)
 "(:FILES :DIRECTORIES :CLASSIFY-SYMLINKS :ERRORP :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 10)) 7))")
(#(13EC6C62 2D462586 424C8991 7E4DD5CC 8155FDDA 8A779204)
 "(:NEW-ENROLLEES :LOCK :THREADS :INTERACTIVE-THREADS :INTERACTIVE-THREADS-QUEUE :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 8)) 7))")
(#(5CA83E1 22B3C8EC 6E6889F8 7E4DD5CC 92586CF4 A892BBBE AA8CF169)
 "(:NAMESTRING :CREATED :START-POSITIONS :PLIST :FORM :FUNCTION :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 16)) 7))")
(#(58402903 7E4DD5CC 941FDD6C A74C5AA3 E32878E5)
 "(:VERBOSE :PRINT :IF-DOES-NOT-EXIST :EXTERNAL-FORMAT :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(17632555 62133B58 AED1DEE7 B6A96EF6 EB29C836)
 "(:UNLESS :WHEN :IF :COND QUOTE)"
 "(  (& (- val (>> val 27)) 7))")
(#(7296570 10C1B9E9 64B1F4F0 6E987445 7E4DD5CC)
 "(:DEBUG-SOURCE :TOPLEVEL-FORM-INDEX :LAST-LOCATION-RETRIEVED :LAST-FORM-RETRIEVED :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 8) (>> val 24)) 7))")
(#(26AF6E38 270E512A 5E585674 7E4DD5CC 89062B61 91A41004 C65B82DD)
 "(:CODE :INITIAL-OFFSET :VIRTUAL-LOCATION :DEBUG-FUN :SOURCE-FORM-CACHE :HOOKS :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 14)) 7))")
(#(64 65 66 67 F0 F2 F3)
 "(100 101 102 103 240 242 243)"
 "(  (& (^ val (>> val 3)) 7))")
(#(3146EB3 1473BF8C 2D238458 7E4DD5CC DB45DA5C)
 "(:DISP :BASE :INDEX :SCALE :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 25)) 7))")
(#(4E4CD394 5107CCF9 7058CBFA 7576E2D1 7E4DD5CC 83F013E2 B59B1040 C1D4C246 C5C94EE3 F034F158 F4EEBB87)
 "(:STREAM :START :FROM :COUNT :PRINT-THREAD :PRINT-PC :ARGUMENT-LIMIT :PRINT-FRAME-SOURCE :METHOD-FRAME-STYLE :EMERGENCY-BEST-EFFORT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 5 12 11 0 2 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(4E4CD394 7E4DD5CC C1D4C246 C5C94EE3 F034F158 F4EEBB87)
 "(:COUNT :ARGUMENT-LIMIT :START :FROM :METHOD-FRAME-STYLE :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 14)) 7))")
(#(5107CCF9 7576E2D1 7E4DD5CC 83F013E2 8DBB3B18 C5C94EE3 F034F158)
 "(:PRINT-FRAME-SOURCE :NUMBER :PRINT-PC :ARGUMENT-LIMIT :METHOD-FRAME-STYLE :EMERGENCY-BEST-EFFORT :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 5) (>> val 9)) 7))")
(#(74477BB4 7709FA94 7E4DD5CC 869ECAB2 B43F165A)
 "(:WALK-FUNCTION :WALK-FORM :DECLARATIONS :LEXICAL-VARS :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 8) (>> val 10)) 7))")
(#(3D6EC19 2800008B 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(5AB44D52 775AF7A7 7E4DD5CC 8AD692D5 92586CF4)
 "(:FUNCTION :PV :NEXT-METHOD-CALL :ARG-INFO :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 5) (>> val 10)) 7))")
(#(95EB707D 9F884B31 A17B2D40 B34F601E E4E46523 E8DC3557)
 "(NOT AND OR CLASS SB-PCL::CLASS-EQ EQL)"
 "(  (& (>> val 10) 7))")
(#(95EB707D 9F884B31 A17B2D40 E4E46523 E8DC3557 F7023710)
 "(NOT AND EQL SB-PCL::WRAPPER-EQ SB-PCL::CLASS-EQ CLASS)"
 "(  (& (^ val (>> val 21)) 7))")
(#(D35ED64 7E4DD5CC 8458248D ECB1338F FD11C553 FDE111BA)
 "(:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 13) (>> val 23)) 7))")
(#(E712E9F 21EEAED8 7E4DD5CC A6DB913C BCB602BB CBC8EE4C D1B31032 DA0BA737 E2AA03BE)
 "(:SLOTD :TYPECHECK :ALLOCATION :LOCATION :READER :WRITER :BOUNDP :MAKUNBOUND :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 5 0 0 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2D6A218B 2EE60D4C 396092DD 5596BBCD 5901019E B9299420 B9E517EC)
 "(SB-PCL::SLOT-CLASS STANDARD-CLASS SB-MOP:FUNCALLABLE-STANDARD-CLASS BUILT-IN-CLASS SB-PCL:SYSTEM-CLASS STRUCTURE-CLASS SB-PCL::CONDITION-CLASS)"
 "(  (& (^ (>> val 5) (>> val 28)) 7))")
(#(14D82EA9 32B8DB71 75241F71 A3C11751 D2A05CC3)
 "(AREF CAR CDR FIRST REST)"
 "(  (& (^ (>> val 6) (>> val 10)) 7))")
(#(7261271 42CF8FC0 4B727B29 76B75AD7 7E4DD5CC 85CA1897 C3EABF48)
 "(:ANSWER-VARIABLE :TYPE :TEMP-VARIABLE :FLAG-VARIABLE :OPERATIONS :INFINITY-DATA :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 1) (>> val 7) (>> val 30)) 7))")
(#(1FE1ADA8 4A98DA2D 704E1060 7E4DD5CC F6E399E1)
 "(:KEYWORDS :ITERATION-KEYWORDS :FOR-KEYWORDS :PATH-KEYWORDS :ALLOW-OTHER-KEYS)"
 "(  (& (+ val (>> val 1)) 7))")
(#(25164A63 5CB524C7 7E4DD5CC CD4167E6 D4B4413F D7CF9B90 E4E46523 FB6863DF)
 "(:NAME :CLASS :HISTORY :TEMPVARS :SPECIFIED-TYPE :DTYPE :DATA :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 8) (>> val 24)) 7))")
(#(5C93F3DF 7E4DD5CC 92586CF4 998E7C29 E878F0C3 FD5A79B0)
 "(:NAMES :PREPOSITION-GROUPS :INCLUSIVE-PERMITTED :FUNCTION :USER-DATA :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 2)) 7))")
(#(2A68106 C88666B 4995E301 58E56AC5 5B7BB6DE 7463EEF9 7B10673A 7B98AFC0 A5404C14 C2E7E4AB F4EEBB87)
 "(:OF :IN :FROM :DOWNFROM :UPFROM :UPTO :TO :DOWNTO :ABOVE :BELOW :BY)"
 "((let ((tab #a((8) (unsigned-byte 8) 4 0 2 0 0 11 8 3)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(0 1 2 3 4 5 6 7)
 "(0 1 2 3 4 5 6 7)"
 "(  (& val 7))")
(#(D1437A 14323D3 53E1077 6A5DE4D 116F91DF 1FA0936E 345094E2 3E3AD04F 68FE090F 6ADC1826 7BA82FCD 7E4DD5CC 8FDB5971 96C89048
   A3545607 C26DF4DD D1532B90 D22C5456 D52A23C5)
 "(:GLOBAL-TN-COUNTER :NORMAL-TNS :RESTRICTED-TNS :WIRED-TNS :CONSTANT-TNS :COMPONENT-TNS :NFP :SPECIFIED-SAVE-TNS :VALUES-RECEIVERS :STACK-ALLOCATES-P :STACK-MESS-UPS :CONSTANTS :ENTRIES :ALIAS-TNS :SPILLED-VOPS :SPILLED-TNS :N-JUMP-TABLE-ENTRIES :COVERAGE-MAP :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 13 16 0 7 15 15 13 0 11 0 21 0 16 0)))
  (let ((b (& val #xf)))
   (let ((a (>> val 28)))
    (^ a (aref tab b))))))")
(#(15CA9185 26C1420D 50B17B49 7E4DD5CC B5569C34 BF470720 C0AA89EA CEDEE978 CF6B27C3 DB3BA8E3 DEF3601F F3CE597E)
 "(:CLOSURE :OLD-FP :RETURN-PC :RETURN-PC-PASS :NUMBER-STACK-P :LIVE-TNS :DEBUG-LIVE-TNS :ELSEWHERE-START :ENVIRONMENT-START :CLOSURE-SAVE-TN :BSP-SAVE-TN :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 4 2 12 13 0 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1B054DAD 32C229AB 4371A7F9 68D86CC1 F6B46BF5 FF98FC30)
 "(SB-VM::REGISTERS SB-VM::CONTROL-STACK SB-C:NON-DESCRIPTOR-STACK CONSTANT SB-VM::IMMEDIATE-CONSTANT SB-VM::FLOAT-REGISTERS)"
 "(  (& (- (>> val 3) (>> val 18)) 7))")
(#(3B52AD8C 49C8CDB2 51E36972 5C48CF20 5D1F0D15 DBC276A3)
 "(LOGTEST LOGBITP %LDB %DPB SIGNUM TRUNCATE)"
 "(  (& (^ (>> val 1) (>> val 16)) 7))")
(#(10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 8010008B 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 4 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(70CB34EE 8010008B A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(1 2 3 4 5 6)
 "(1 2 3 4 5 6)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 0 0 5)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 29) 30)))
    (^ a (aref tab b))))))")
(#(3C28E423 7F853C99 8010008B 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (+ (>> val 3) (>> val 10)) 7))")
(#(47ED28C7 7980B71D 8010008B A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 2) (>> val 27)) 7))")
(#(0 1 3 5 6 7 8 9 A B C D E)
 "(0 9 10 12 1 7 6 13 11 8 5 14 3)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 12 0 12 0 0 8)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(0 1 2 3 4 5 6 7 8 9 A B C D E F)
 "(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 12 0 12 0 12)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(0 1 2 3 4 5 6 7 8 9 A B C D F 10)
 "(0 1 15 13 2 3 7 8 9 16 10 4 11 12 5 6)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 13 8 0 8 7 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 27) 29)))
    (^ a (aref tab b))))))")
(#(42F9EC4F 52ECC4FA 53C6AF8C 546D436A 8010008B D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(0 1 2 3 4 5 6 7 8 9 A B C D E F 10)
 "(0 1 15 13 2 3 14 7 8 9 16 10 4 11 12 6 5)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 13 0 13 0 15 0 13 0 23)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 27) 28)))
    (^ a (aref tab b))))))")
(#(4 5 6 7 8 9 A B C F)
 "(4 10 7 8 9 11 6 5 12 15)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 0 12 0 2 2 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(0 1 2 3 7 8 D E F)
 "(0 3 2 14 13 1 7 8 15)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 8 0 4 0 0 5 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(4 5 6 7 8 F)
 "(4 6 5 15 7 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 0 4 6)))
  (let ((b (>> (<< val 28) 30)))
   (let ((a (& val #x3)))
    (^ a (aref tab b))))))")
(#(4 5 6 7 8)
 "(6 5 4 7 8)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 2 5 1)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(50CD4DF 32C229AB 7FD087C8 9B0ED14E D5723A9D E1B4FE02 EE9BDDAE)
 "(:CONSTANT :ENTRY :LOAD-TIME-VALUE :FDEFINITION :KNOWN-FUN :COVERAGE-MARKS :TLS-INDEX)"
 "(  (& (+ (>> val 3) (>> val 19)) 7))")
(#(19A804F1 42354AFF 511F123D 52F791B3 8AFF6C0B B6C53C5B C085651F CB28EF79 CB2A2A51 E7BDDEAC EED915AA F1366560 FB4D653B)
 "(:ASSEMBLY-ROUTINE :ASSEMBLY-ROUTINE* :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :SYMBOL-TLS-INDEX :LAYOUT :LAYOUT-ID :CARD-TABLE-INDEX-MASK :IMMOBILE-SYMBOL :SYMBOL-VALUE)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 8 0 0 0 3 5 8)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(BA54B74 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8010008B 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 13 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(6F4E2B12 8010008B 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(15CB10B1 2CE73EE7 34E7D21C 6F47881C 75D98C9F AF5C399B C3673D12 D1F7C4FD E3E7FCEB)
 "(:UXTB :UXTH :UXTW :LSL :UXTX :SXTB :SXTH :SXTW :SXTX)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 0 0 4 0 5)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(DA10 DA20 DA21 DCE8 DE82 DE83)
 "(55824 55840 55841 56552 56962 56963)"
 "(  (& (+ (>> val 0) (>> val 4) (>> val 8)) 7))")
(#(432D590 E0106E3 1DA93F40 702216F9 88B200C9 DEBFB91F)
 "(:NZCV :FPCR :FPSR :CCNT :TPIDR_EL0 :TPIDRRO_EL0)"
 "(  (& (^ val (>> val 18)) 7))")
(#(5B51BB48 5F663783 BDD7F987 DE9F2FCD EA82DC34 ED70D708 EE485E8D)
 "(:|8B| :|16B| :|4H| :|8H| :|2S| :|4S| :|2D|)"
 "(  (& (+ (>> val 1) (>> val 4)) 7))")
(#(5B51BB48 5F663783 DE9F2FCD EA82DC34 ED70D708)
 "(:|8B| :|16B| :|4H| :|8H| :|4S|)"
 "(  (& (- (>> val 7) (>> val 9)) 7))")
(#(A96D793 5DB2EF1B 64688A38 71A4657D 7C678985 8D027A6B 965CD62A A0FAB3A5 B690AE2E CD22F006 D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :OWORD :BASE-CHAR :CHARACTER :SINGLE-FLOAT :DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT :COMPLEX-DOUBLE-FLOAT :FIXUP)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 0 5 2 3 14 11)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(A96D793 64688A38 8D027A6B B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :OWORD :FIXUP)"
 "(  (& (>> val 26) 7))")
(#(4153B09A 488BFA28 7E4DD5CC C447D681 E9362827)
 "(:DROP-THROUGH :VALUE-TN-REF :IMMEDIATE-TESTED :NIL-IN-OTHER-POINTERS :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 5)) 7))")
(#(BA54B74 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8010008B 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 11 3 0 9 0 3 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(50EDFBF1 6C16ABD3 8010008B AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 1 2 3 FFFFFFFF)
 "(-1 0 1 2 3)"
 "(  (& (^ val (>> val 30)) 7))")
(#(2 3 5 8 9 A B C D)
 "(9 8 11 10 5 2 12 3 13)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 3 0 5 5 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(2 3 5 8 A B C E)
 "(8 11 10 5 2 12 3 14)"
 "((let ((tab #a((4) (unsigned-byte 8) 0 5 7 0)))
  (+= val #x2965919a)
  (^= val (>> val 4))
  (let ((b (& val #x3)))
   (let ((a (>> (u32+ val (<< val 28)) 30)))
    (^ a (aref tab b))))))")
(#(2 3 5 6 7 8 A B C E)
 "(8 10 5 11 6 7 14 2 3 12)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 5 0 0 0 10)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(2 3 5 6 7 8 9 A B C E)
 "(8 10 5 11 6 9 7 14 2 3 12)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 0 5 0 0 0 9)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 28) 29)))
    (^ a (aref tab b))))))")
(#(2 3 5 6 7 8 C E)
 "(8 5 6 7 14 2 3 12)"
 "((let ((tab #a((4) (unsigned-byte 8) 7 3 0 7)))
  (let ((b (& val #x3)))
   (let ((a (>> (<< val 28) 30)))
    (^ a (aref tab b))))))")
(#(0 5B8CF706 8010008B C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (+ (>> val 2) (>> val 3)) 7))")
(#(0 1 2 FFFFFFFE FFFFFFFF)
 "(2 -2 -1 0 1)"
 "(  (& (- val (>> val 30)) 7))")
(#(0 1 2 3 4 5 7 8 9 A B C D E F 10 11 12 15 16 17 18)
 "(1 0 15 16 2 17 18 21 22 23 24 11 12 13 14 5 9 8 7 10 3 4)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 7 13 0 31 0 0 3 21 16 21 20 9 22)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 27) 28)))
    (^ a (aref tab b))))))")
(#(0 1 2 5 7 8 9 A B C D E F 10 11 12 15 16 17 18)
 "(1 0 15 16 2 17 18 21 22 23 24 11 12 13 14 5 9 8 7 10)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 0 0 0 13 0 0 3 21 11 21 9 21 22)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 27) 28)))
    (^ a (aref tab b))))))")
(#(8 9 A B C D E F 10)
 "(8 9 16 10 11 12 13 14 15)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 4 2 0 11 2 6)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 27) 29)))
    (^ a (aref tab b))))))")
(#(3D6EC19 326CF299 3A1DA026 8010008B 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7808008B 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 1 0 3 0 0 14)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(70CB34EE 7808008B A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(3C28E423 7808008B 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (+ (>> val 3) (>> val 10)) 7))")
(#(47ED28C7 7808008B 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(42F9EC4F 52ECC4FA 53C6AF8C 546D436A 7808008B D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(BA54B74 2F740446 53DC2256 659A1BF7 6F4E2B12 7808008B 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 3 9 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(6F4E2B12 7808008B 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(BA54B74 2F740446 3C28E423 659A1BF7 6F4E2B12 7808008B 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 0 9 0 4 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(50EDFBF1 6C16ABD3 7808008B AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 5B8CF706 7808008B C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (+ val (>> val 27)) 7))")
(#(3D6EC19 326CF299 3A1DA026 7808008B 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(15CA9185 26C1420D 50B17B49 7E4DD5CC 825AADF5 95EFE4B5 B5569C34 BF470720 C0AA89EA CEDEE978 CF6B27C3 DEF3601F F3CE597E)
 "(:CLOSURE :OLD-FP :RETURN-PC :RETURN-PC-PASS :LRA-SAVED-PC :CFP-SAVED-PC :NUMBER-STACK-P :LIVE-TNS :DEBUG-LIVE-TNS :ELSEWHERE-START :ENVIRONMENT-START :CLOSURE-SAVE-TN :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 2 0 5 0 12 0)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(132431BB 7E4DD5CC A063C516 A0AF8FF9 C363F876 E068D776)
 "(:HOME :SAVE-SP :DYNAMIC-STATE :TARGET :BLOCK-TN :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 4) (>> val 14)) 7))")
(#(208008B 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 12 0 15 0 13 5)))
  (let ((b (& (>> val 18) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(208008B 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(25164A63 26C1420D 50B17B49 606E0E3A 7E4DD5CC 8C4D859A 957AEDB3 A54A0028 AF9EE065 D8F2B7EA DEF3601F F0A1752E)
 "(:NAME :VARS :BLOCKS :TLF-NUMBER :ARGUMENTS :RETURNS :RETURN-PC :RETURN-PC-PASS :OLD-FP :ENCODED-LOCS :NEXT :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 8 0 3 8 0 15 6)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(208008B 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (+ (>> val 3) (>> val 10)) 7))")
(#(208008B 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- val (>> val 24)) 7))")
(#(208008B 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(208008B BA54B74 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 0 9 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(208008B 6F4E2B12 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(961FB1E 64688A38 B690AE2E BE9A93F3 E0A39FB8 F0F18BF8)
 "(:BYTE :SHORT :WORD :DWORD :SINGLE :DOUBLE)"
 "(  (& (^ (>> val 6) (>> val 29)) 7))")
(#(208008B 3A909AC4 75138050 BCDBA900 F4C5E7A1)
 "(:LOAD-NARGS :FROB-NFP :SAVE-FP :LOAD-FP NIL)"
 "(  (& (^ val (>> val 9)) 7))")
(#(208008B 385ABA4 3A909AC4 75138050 FB71C927)
 "(:LOAD-NARGS :LOAD-OCFP :LOAD-RETURN-PC :FROB-NFP NIL)"
 "(  (& (+ (>> val 2) (>> val 28)) 7))")
(#(208008B BA54B74 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 4 10 0 5 0 2 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(208008B 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 208008B 5B8CF706 C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (+ (>> val 2) (>> val 3)) 7))")
(#(0 1 2 3 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17)
 "(1 0 10 12 2 15 7 8 17 19 21 23 16 18 20 22 6 9 14 13 11 3 5)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 13 0 0 13 21 16 21 16 21 16 21 8)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 27) 28)))
    (^ a (aref tab b))))))")
(#(0 1 2 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17)
 "(1 0 10 12 2 15 7 8 17 19 21 23 16 18 20 22 6 9 14 13 11)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 13 0 13 0 13 0 13 21 16 7 21 21 9 21 11)))
  (let ((b (& val #xf)))
   (let ((a (>> (<< val 27) 28)))
    (^ a (aref tab b))))))")
(#(8 9 B C D E F)
 "(11 9 8 12 13 14 15)"
 "(  (& (^ val (>> val 1)) 7))")
(#(208008B 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 11 2 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(10ACE44E 2808008B 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 1 0 3 0 0 14)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(2808008B 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(2808008B 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (- (>> val 1) (>> val 29)) 7))")
(#(2808008B 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(2808008B 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(19A804F1 42354AFF 511F123D 52F791B3 8AFF6C0B B6C53C5B CB28EF79 CB2A2A51 E7BDDEAC EED915AA F1366560 FB4D653B)
 "(:ASSEMBLY-ROUTINE :ASSEMBLY-ROUTINE* :ALIEN-CODE-LINKAGE-INDEX :ALIEN-DATA-LINKAGE-INDEX :FOREIGN :FOREIGN-DATAREF :CODE-OBJECT :LAYOUT :LAYOUT-ID :CARD-TABLE-INDEX-MASK :IMMOBILE-SYMBOL :SYMBOL-VALUE)"
 "((let ((tab #a((8) (unsigned-byte 8) 10 0 0 0 0 3 5 8)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(BA54B74 2808008B 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 8 0 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(2808008B 6F4E2B12 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(BA54B74 2808008B 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 0 9 5 3 7 0 2)))
  (let ((b (& (>> val 1) #x7)))
   (let ((a (>> (<< val 31) 29)))
    (^ a (aref tab b))))))")
(#(2808008B 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 2808008B 5B8CF706 C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (+ (>> val 2) (>> val 3)) 7))")
(#(3D6EC19 2808008B 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1000808B 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1000808B 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(1000808B 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (+ (>> val 3) (>> val 10)) 7))")
(#(1000808B 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(1000808B 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (+ (>> val 4) (>> val 28)) 7))")
(#(DC1A38C 5368D489 58402903 7E4DD5CC E32878E5 E4E46523 ECEAC1AA FDE111BA)
 "(:DIRECTION :ELEMENT-TYPE :IF-EXISTS :IF-DOES-NOT-EXIST :EXTERNAL-FORMAT :CLASS :OVERLAPPED :ALLOW-OTHER-KEYS)"
 "(  (& (+ (>> val 2) (>> val 29)) 7))")
(#(BA54B74 1000808B 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 0 9 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1000808B 6F4E2B12 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(BA54B74 1000808B 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 4 10 0 5 0 2 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1000808B 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 1000808B 5B8CF706 C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (>> val 14) 7))")
(#(3D6EC19 1000808B 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(1008808B 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 12 1 0 7 0 0 14)))
  (let ((b (& (>> val 6) #x7)))
   (let ((a (>> (<< val 4) 29)))
    (^ a (aref tab b))))))")
(#(1008808B 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- val (>> val 9)) 7))")
(#(1008808B 3C28E423 7F853C99 8059D202 8612A6FE CF79C550)
 "(:OPTIONAL :MORE :EXTERNAL :TOPLEVEL :CLEANUP NIL)"
 "(  (& (+ (>> val 3) (>> val 10)) 7))")
(#(1008808B 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (- (>> val 4) (>> val 31)) 7))")
(#(1008808B 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (+ (>> val 4) (>> val 28)) 7))")
(#(BA54B74 1008808B 2F740446 53DC2256 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(NIL :LET :MV-LET :ASSIGNMENT :ESCAPE :CLEANUP :EXTERNAL :DELETED :ZOMBIE :OPTIONAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 11 0 9 0 0 0)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1008808B 6F4E2B12 8612A6FE A55DBD6F CF79C550)
 "(NIL :CLEANUP :OPTIONAL :DELETED :ASSIGNMENT)"
 "(  (& (+ val (>> val 7)) 7))")
(#(BA54B74 1008808B 2F740446 3C28E423 659A1BF7 6F4E2B12 7F853C99 8612A6FE A55DBD6F CF79C550)
 "(:EXTERNAL :LET :MV-LET :ASSIGNMENT :OPTIONAL :TOPLEVEL NIL :ESCAPE :CLEANUP :DELETED)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 4 10 0 5 0 2 7)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(1008808B 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (+ val (>> val 7)) 7))")
(#(0 1008808B 5B8CF706 C8A25DB2 D5A920A2)
 "(NIL :LOGICAL-BLOCK T 0 :LOGICAL-BLOCK-CIRCULAR)"
 "(  (& (>> val 14) 7))")
(#(3D6EC19 1008808B 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(132431BB 1DE6A158 294F39FA 449607FC 775AF7A7 7C914DB1 7D224C44 7E4DD5CC 8D9220F2 8DBB3B18 969168E9 B4C67B51 BA14BD32
   C1B40A07 C3EABF48 C80506D7 C9A0837E D3801745 DC2E453B FBB90A17 FCD92448 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :SETS :FLAGS :HOME :ARG-INFO :SPECVAR :CONSTRAINTS :CTYPE-CONSTRAINTS :EQ-CONSTRAINTS :EQL-VAR-CONSTRAINTS :INHERITABLE-CONSTRAINTS :EQUALITY-CONSTRAINTS :SOURCE-FORM :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 24 0 0 0 11 0 1 14 0 1 31 1 17 30)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(B414EE0 164A583D 4214F49C 543DAB03 6731B27F 7E4DD5CC 80D6A04E 81748681 845FE436 8DBB3B18 94DAB903 D8F2B7EA)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :DERIVED-TYPE :LVAR :VAR :VALUE :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 14 13 0 0 12 5)))
  (let ((b (& (>> val 7) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(DE95B1 2681DDA1 2A70C0ED 32B8DB71 4D28DE4D 4D74A788 6F779AF3 7773A213 7CBB0DFC C76F980E CD735EFC E8068BC4)
 "(SB-C::& + SB-C::U32+ SB-C::+= - SB-C::U32- SB-C::<< SB-C::>> SB-C::>>= SB-C::^ SB-C::^= AREF)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 13 14 0 3 0 3 0)))
  (let ((b (& (>> val 4) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(D5E7BDB 4499E855 61F4228E 76DB0CD0 922F453B)
 "(SB-C::T0 SB-C::T1 SB-C::T2 SB-C::T3 SB-C::T4)"
 "(  (& (^ val (>> val 11)) 7))")
(#(0 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (+ val (>> val 6)) 3) )")
(#(0 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(0 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(0 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 2)) 3) )")
(#(0 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(0 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 1) (>> val 8)) 7))")
(#(0 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(0 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (^ val (>> val 16)) 7))")
(#(0 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 1) 3) )")
(#(0 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(0 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 11)) 7))")
(#(0 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(0 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (+ val (>> val 24)) 3) )")
(#(0 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 1) (>> val 7)) 7))")
(#(0 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(0 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ (>> val 1) (>> val 26)) 7))")
(#(0 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(0 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(0 64688A38 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD NIL)"
 "(  (& (^ val (>> val 22)) 7))")
(#(0 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(0 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (- (>> val 1) (>> val 6)) 7))")
(#(0 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (+ (>> val 1) (>> val 27)) 7))")
(#(0 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(0 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(0 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 5 4 0 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(0 3ABB4966 7F853C99 C0014833)
 "(NIL :INHERITED :EXTERNAL :INTERNAL)"
 "(  (& val 3) )")
(#(35387DE 7E4DD5CC 92586CF4 A758CF19 C3EABF48)
 "(:TYPE :FUNCTION :IMPORTANT :POLICY :ALLOW-OTHER-KEYS)"
 "(  (& (- (>> val 1) (>> val 5)) 7))")
(#(246D4FD0 321B4470 42CAE6A9 55DFCE4E 59FE9825 F569D93E)
 "(SB-VM::FIXEDOBJ SB-VM::TEXT SB-VM::PERMGEN SB-VM::SAFEPOINT SB-VM::STATIC SB-VM::READ-ONLY)"
 "(  (& (^ (>> val 1) (>> val 21)) 7))")
(#(3 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (- val (>> val 2)) 3) )")
(#(3 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(3 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(3 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 3)) 3) )")
(#(3 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& (>> val 8) 3) )")
(#(3 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(3 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(3 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (- (>> val 2) (>> val 25)) 7))")
(#(3 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (+ val (>> val 1)) 3) )")
(#(3 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(3 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(3 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(3 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (- val (>> val 4)) 3) )")
(#(3 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 7) (>> val 11)) 7))")
(#(3 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(3 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ val (>> val 1)) 7))")
(#(3 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(3 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(3 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(7980B71D 7C678985 82FDFC4E CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (>> val 10) 3) )")
(#(10ACE44E 74748736 82FDFC4E 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 12) 3) )")
(#(82FDFC4E E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 1) 3) )")
(#(82FDFC4E 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (+ val (>> val 3)) 3) )")
(#(19627350 3932B57B 82FDFC4E C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& val 3) )")
(#(12D85B02 47ED28C7 568510D9 82FDFC4E EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (+ (>> val 1) (>> val 31)) 7))")
(#(55E45869 62971997 82FDFC4E 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 4) 3) )")
(#(3C28E423 6610551C 82FDFC4E A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (+ (>> val 1) (>> val 6)) 7))")
(#(82FDFC4E 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (>> val 12) 3) )")
(#(82FDFC4E 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 16) 3) )")
(#(519DD3CE 55B0F9E6 70E7C178 82FDFC4E 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (^ (>> val 1) (>> val 13)) 7))")
(#(60574E06 7BC3707A 7F9752D2 82FDFC4E)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 2) 3) )")
(#(60574E06 7F9752D2 82FDFC4E ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (& (>> val 24) 3) )")
(#(7A03BEDF 82FDFC4E 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (- (>> val 4) (>> val 24)) 7))")
(#(3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A 82FDFC4E D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 18) (>> val 24)) 7))")
(#(B414EE0 3B3832EC 82FDFC4E A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (+ (>> val 9) (>> val 16)) 7))")
(#(50EDFBF1 6C16ABD3 82FDFC4E AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (- (>> val 7) (>> val 18)) 7))")
(#(82FDFC4E C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 8) 3) )")
(#(90EDB7B 1FDE90F6 25164A63 50F5AB12 82FDFC4E B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (- (>> val 2) (>> val 10)) 7))")
(#(2 7980B71D 7C678985 CD22F006)
 "(NIL BASE-CHAR CHARACTER *)"
 "(  (& (- val (>> val 13)) 3) )")
(#(2 10ACE44E 74748736 971A1DF1)
 "(NIL FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 5) 3) )")
(#(2 E022967D FB685091 FF5AE652)
 "(NIL :HEAD :TAIL :BOTH)"
 "(  (& (>> val 14) 3) )")
(#(2 905F66AC 92586CF4 9D5025AF)
 "(:SPECIAL-FORM :MACRO :FUNCTION NIL)"
 "(  (& (- val (>> val 2)) 3) )")
(#(2 19627350 3932B57B C3C1E2DD)
 "(NIL NOTINLINE MAYBE-INLINE INLINE)"
 "(  (& val 3) )")
(#(2 12D85B02 47ED28C7 568510D9 EC8EB822)
 "(NIL :FORTHCOMING-DEFCLASS-TYPE :INSTANCE :DEFINED :PRIMITIVE)"
 "(  (& (^ (>> val 11) (>> val 24)) 7))")
(#(2 55E45869 62971997 8F406FFB)
 "(:AUTO :IMMOBILE :DYNAMIC NIL)"
 "(  (& (>> val 3) 3) )")
(#(2 3C28E423 6610551C A1DFDD0E A55DBD6F)
 "(:DELETED :INITIAL :COMPLEX-TOPLEVEL :TOPLEVEL NIL)"
 "(  (& (- (>> val 2) (>> val 25)) 7))")
(#(2 8D87477C C8A25DB2 F987A176)
 "(SB-C::INITIAL-UNUSED T SET NIL)"
 "(  (& (+ val (>> val 6)) 3) )")
(#(2 83A45D5A 90B78E0C C8A25DB2)
 "(:COMPUTE-ONLY :FORCE-TO-STACK NIL T)"
 "(  (& (>> val 3) 3) )")
(#(2 519DD3CE 55B0F9E6 70E7C178 92E00046)
 "(:FIXED :KNOWN-RETURN :LOCAL-CALL :FULL-CALL NIL)"
 "(  (& (+ (>> val 1) (>> val 12)) 7))")
(#(2 60574E06 7BC3707A 7F9752D2)
 "(:UNSPECIFIC :WILD :NEWEST NIL)"
 "(  (& (>> val 22) 3) )")
(#(2 60574E06 7F9752D2 ED8B5226)
 "(:UNC :WILD :UNSPECIFIC NIL)"
 "(  (^ (& (>> val 11) 2) (& (>> val 2) 1)) )")
(#(2 7A03BEDF 8E8B60F0 9D81B113 D8C1EE02 FBADBE01)
 "(:NAMED :PREDICATE :COPIER :CONSTRUCTOR :CONC-NAME NIL)"
 "(  (& (^ (>> val 7) (>> val 11)) 7))")
(#(2 3E421619 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(NIL :SUPERSEDE :APPEND :OVERWRITE :RENAME-AND-DELETE :RENAME :NEW-VERSION :ERROR)"
 "(  (& (- (>> val 2) (>> val 18)) 7))")
(#(2 B414EE0 3B3832EC A256D8C6 E3479BD2)
 "(:KEY-OR-VALUE :KEY-AND-VALUE :VALUE :KEY NIL)"
 "(  (& (- (>> val 5) (>> val 20)) 7))")
(#(2 50EDFBF1 6C16ABD3 AC25889A E8DC3557)
 "(EQ EQL EQUAL EQUALP NIL)"
 "(  (& (^ (>> val 2) (>> val 13)) 7))")
(#(2 C07E71ED E022967D E41ED3F1)
 "(NIL :STRINGS :BOTH :SYMBOLS)"
 "(  (& (>> val 3) 3) )")
(#(2 90EDB7B 1FDE90F6 25164A63 50F5AB12 B800E558 C3EABF48)
 "(:VERSION :TYPE :NAME :DIRECTORY :DEVICE :HOST NIL)"
 "(  (& (>> val 12) 7))")
(#(12C6DBF 35387DE 7E4DD5CC A758CF19 C3EABF48)
 "(:TYPE :%FUN :IMPORTANT :POLICY :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 13)) 7))")
(#(132431BB 1DE6A158 294F39FA 41D84724 449607FC 775AF7A7 7C914DB1 7D224C44 7E4DD5CC 8D9220F2 8DBB3B18 969168E9 B4C67B51
   BA14BD32 C1B40A07 C3EABF48 C80506D7 C9A0837E D3801745 DC2E453B FBB90A17 FCD92448 FE6A9C07)
 "(:NUMBER :%SOURCE-NAME :TYPE :DEFINED-TYPE :WHERE-FROM :REFS :EVER-USED :DYNAMIC-EXTENT :INFO :SETS :FLAGS :HOME :ARG-INFO :SPECVAR :CONSTRAINTS :CTYPE-CONSTRAINTS :EQ-CONSTRAINTS :EQL-VAR-CONSTRAINTS :INHERITABLE-CONSTRAINTS :EQUALITY-CONSTRAINTS :EQUALITY-CONSTRAINTS-HASH :SOURCE-FORM :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 0 0 31 0 0 0 11 0 1 14 0 1 31 1 16 24)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(B74EA80 2315A63C 285D29BD 46CDAA6D 4913800D 5597FB3D 5708B5D3 708C7CD6 74191541 74477BB4 7E4DD5CC A3B42EB2 A5860C2B E41ED3F1
   E61904A7 ED178322 F68E2BEE)
 "(:DECLARATIONS :%POLICY :BINDING-TYPECHECKS :EXTRA-TYPECHECKS :TYPE-RESTRICTIONS :SYMBOLS :SPECIAL-B :VALUES :SEXPR :SPECIALS :N-BOUND-VARS :MIN-ARGS :N-OPTIONAL :KEYWORD-BITS :BLOCK-NAME :SHARE-BLOCK-P :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((16) (unsigned-byte 8) 14 0 0 24 14 13 10 0 0 1 10 0 0 7 3 12)))
  (let ((b (& (>> val 5) #xf)))
   (let ((a (>> (<< val 31) 28)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::CDYNAMIC-EXTENT) (:TYPE SB-C::COMBINATION) (:TYPE SB-C::ENCLOSE) (:TYPE EXIT) (:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::ENTRY) (:TYPE SB-C::CIF) (:TYPE SB-C::CRETURN)) ((:TYPE SB-C::REF)) ((:TYPE SB-C::CSET)) ((:TYPE BIND)))"
 "((let ((tab #a((8) (unsigned-byte 8) 14 5 0 0 8 7 4 14)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D 8A6265B8 B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140 FCD93907)
 "#(((:TYPE BIND) (:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::CRETURN)) ((:TYPE EXIT)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 0 0 0 8 0 10 6)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140
   FCD93907)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE BIND)) ((:TYPE EXIT)) ((:TYPE SB-C::ENTRY)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::ENCLOSE)) ((:TYPE SB-C::CDYNAMIC-EXTENT)))"
 "((let ((tab #a((8) (unsigned-byte 8) 5 15 8 13 0 0 4 10)))
  (let ((b (& (>> val 20) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 4F94B5E7 714D6B00 88BA357D B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 4 0 0 11 5 11 7)))
  (let ((b (& (>> val 10) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(4B574AE2 714D6B00 B313FB62 C888E122 D2205031 D37E3DCA DB3125F9 DE352140)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION)) ((:TYPE SB-C::MV-COMBINATION)) ((:TYPE EXIT)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)))"
 "(  (& (+ (>> val 8) (>> val 25)) 7))")
(#(714D6B00 8A6265B8 B313FB62 C888E122 D2205031 DB3125F9 DE352140)
 "#(((:TYPE BIND)) ((:TYPE SB-C::REF)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE SB-C::CSET)) ((:TYPE SB-C::COMBINATION)))"
 "(  (& (- (>> val 7) (>> val 24)) 7))")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 DC4D4F5D E8DC3557 F987A176)
 "(SET SB-C::EQUALITY EQL <= >= = > < TYPEP)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 0 0 0 0 5 0 1)))
  (let ((b (& val #x7)))
   (let ((a (>> val 29)))
    (^ a (aref tab b))))))")
(#(12C4811C 50B431CB 834BCA78 8F6A8805 934E6A73 A1148EC6 E8DC3557 F987A176)
 "(TYPEP EQL < > <= >= = SET)"
 "(  (& (- val (>> val 28)) 7))")
(#(19A804F1 42354AFF 52F791B3 C085651F F1366560)
 "(:LAYOUT-ID :LAYOUT :IMMOBILE-SYMBOL :SYMBOL-TLS-INDEX :CARD-TABLE-INDEX-MASK)"
 "(  (& (+ val (>> val 30)) 7))")
(#(A96D793 64688A38 8D027A6B 9CB7F4E3 B690AE2E D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :FIXUP :JUMP-TABLE :OWORD)"
 "(  (& (- (>> val 2) (>> val 30)) 7))")
(#(1473BF8C 4214F49C 543DAB03 6731B27F 7E4DD5CC 81748681 845FE436 8DBB3B18 9C1E40C0 D8F2B7EA FC0E8E0A)
 "(:NUMBER :REOPTIMIZE :NEXT :PREV :LEXENV :SOURCE-PATH :TAIL-P :INDEX :TARGETS :TARGET-CONSTRAINTS :ALLOW-OTHER-KEYS)"
 "((let ((tab #a((8) (unsigned-byte 8) 12 11 5 4 0 0 3 4)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140
   E555AFBC)
 "#(((:TYPE SB-C:JUMP-TABLE) (:TYPE SB-C::CDYNAMIC-EXTENT) (:TYPE SB-C::COMBINATION) (:TYPE SB-C::ENCLOSE) (:TYPE EXIT) (:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::ENTRY) (:TYPE SB-C::CIF) (:TYPE SB-C::CRETURN)) ((:TYPE SB-C::REF)) ((:TYPE SB-C::CSET)) ((:TYPE BIND)))"
 "((let ((tab #a((8) (unsigned-byte 8) 2 14 0 8 8 5 4 15)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(F8ABEE3 4B574AE2 4F94B5E7 4FD472D8 714D6B00 88BA357D 8A6265B8 B313FB62 C0D75980 C888E122 D2205031 D37E3DCA DB3125F9 DE352140
   E555AFBC FCD93907)
 "#(((:TYPE SB-C::REF)) ((:TYPE SB-C::COMBINATION) (:TYPE SB-C::MV-COMBINATION) (:TYPE SB-C::BASIC-COMBINATION)) ((:TYPE SB-C::CIF)) ((:TYPE SB-C:JUMP-TABLE)) ((:TYPE SB-C::CSET)) ((:TYPE DELAY) (:TYPE SB-C::ARRAY-INDEX-CAST) (:TYPE CAST)) ((:TYPE BIND)) ((:TYPE SB-C::CRETURN)) ((:TYPE SB-C::ENTRY)) ((:TYPE SB-C::ENCLOSE)) ((:TYPE SB-C::CDYNAMIC-EXTENT)) ((:TYPE EXIT)))"
 "((let ((tab #a((8) (unsigned-byte 8) 0 13 0 0 12 14 8 3)))
  (let ((b (& (>> val 15) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(CE71FAA 1430BAFC 25164A63 68D6D579 7E4DD5CC D6E7D73B F5EA1D35)
 "(:NAME :SOURCE :PACKAGE :FUN-MAP :CONTEXTS :MEMO-CELL :ALLOW-OTHER-KEYS)"
 "(  (& (^ (>> val 1) (>> val 23)) 7))")
(#(D3D3B9B 1705B61C 6C7E1410 7A38389C)
 "(SB-C::VAL SB-C::NEWVAL SB-C::A SB-C::B)"
 "(  (& (>> val 9) 3) )")
(#(DE95B1 2681DDA1 2A70C0ED 4D74A788 C76F980E E8068BC4)
 "#(SB-C::<< SB-C::U32+ SB-C::U32- SB-C::+= SB-C::>> SB-C::>>=)"
 "(  (& (- (>> val 6) (>> val 13)) 7))")
(#(3 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(T BASE-CHAR STANDARD-CHAR CHARACTER EXTENDED-CHAR BIT FIXNUM UNSIGNED-BYTE SIGNED-BYTE DOUBLE-FLOAT SINGLE-FLOAT MOD INTEGER COMPLEX NIL)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3 70CB34EE A74C4D40 E29480A8 FF414202)
 "(NIL LIST CONS VECTOR SIMPLE-VECTOR)"
 "(  (& (^ val (>> val 1)) 7))")
(#(3 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(T * INSTANCE FUNCALLABLE-INSTANCE EXTENDED-SEQUENCE NIL)"
 "(  (& (+ (>> val 1) (>> val 22)) 7))")
(#(3 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:NEW-VERSION :ERROR NIL :RENAME :RENAME-AND-DELETE :SUPERSEDE :APPEND)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(A96D793 5DB2EF1B 64688A38 71A4657D 7C678985 8D027A6B 965CD62A 9CB7F4E3 A0FAB3A5 B690AE2E CD22F006 D1146057 E0A39FB8)
 "(:BYTE :WORD :DWORD :QWORD :OWORD :BASE-CHAR :CHARACTER :SINGLE-FLOAT :DOUBLE-FLOAT :COMPLEX-SINGLE-FLOAT :COMPLEX-DOUBLE-FLOAT :FIXUP :JUMP-TABLE)"
 "((let ((tab #a((8) (unsigned-byte 8) 14 0 4 0 5 2 12 10)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(3 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(EVAL FUNCTION SB-WALKER::TEST SB-WALKER::EFFECT RETURN QUOTE NIL SET LAMBDA SB-WALKER::CALL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 5 8 4 2 0 0 13)))
  (let ((b (& val #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2 3 5 8 9 A B C)
 "(3 12 2 5 10 11 8 9)"
 "(  (& (+ (>> val 0) (>> val 1) (>> val 2)) 7))")
(#(71A5A23 140C6C3A 7A372C76 89072FE6)
 "(:RESULT-TYPES :ARG-TYPES :ARG-CHECK :GUARD)"
 "(  (& (>> val 19) 3) )")
(#(74748736 965CD62A 971A1DF1 A0FAB3A5 A2195041)
 "(REAL FLOAT DOUBLE-FLOAT SINGLE-FLOAT RATIONAL)"
 "(  (& (^ val (>> val 13)) 7))")
(#(10ACE44E 74748736 965CD62A 971A1DF1 A0FAB3A5 A2195041)
 "(REAL FLOAT DOUBLE-FLOAT SINGLE-FLOAT RATIONAL INTEGER)"
 "(  (& (>> val 2) 7))")
(#(2A9B425 B9C768B 590BA280 6FED881E 7685F9E6 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C DB2BD6D1 E0307D49 E26011AD E94E5DF8
   EAB7029E F84A6B24)
 "#(((:TYPE VALUES-TYPE)) ((:TYPE FUN-DESIGNATOR-TYPE) (:TYPE FUN-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE CONSTANT-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE ALIEN-TYPE-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 13 4 14 0 12 10 3 4)))
  (let ((b (& (>> val 27) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 590BA280 6FED881E 9765C8E7 9A16AFFB 9ED11C51 A6E24C79 B35D548C E0307D49 E26011AD E94E5DF8 EAB7029E
   F84A6B24)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE) (:TYPE CHARACTER-SET-TYPE) (:TYPE MEMBER-TYPE) (:TYPE NUMERIC-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE) (:TYPE INTERSECTION-TYPE) (:TYPE COMPOUND-TYPE)) ((:TYPE NEGATION-TYPE)))"
 "((let ((tab #a((8) (unsigned-byte 8) 5 0 13 8 5 0 7 14)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 350770A3 590BA280 5F5FC85C 65A7B3D6 6FED881E 7685F9E6 76DE51BF 92FBC223 9765C8E7 9A16AFFB 9ED11C51
   A6E24C79 B35D548C C76C711E DB2BD6D1 E0307D49 E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE NUMERIC-TYPE)) ((:TYPE ARRAY-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE NAMED-TYPE)) ((:TYPE CHARACTER-SET-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE BUILT-IN-CLASSOID)) ((:TYPE FUN-DESIGNATOR-TYPE)) ((:TYPE FUN-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE CONSTANT-TYPE) (:TYPE VALUES-TYPE) (:TYPE ARGS-TYPE) (:TYPE UNKNOWN-TYPE) (:TYPE NEGATION-TYPE) (:TYPE ALIEN-TYPE-TYPE) (:TYPE HAIRY-TYPE) (:TYPE COMPOUND-TYPE) (:TYPE CTYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 1 15 21 18 13 29 7 0 7 0 0 13 31 20 8 0)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(2A9B425 B9C768B 1DF6628B 590BA280 5F5FC85C 65A7B3D6 6FED881E 76DE51BF 9765C8E7 9A16AFFB A6E24C79 B35D548C C76C711E E0307D49
   E26011AD E94E5DF8 EAB7029E F84A6B24 FA751134 FBD5DA6A FCA25B62)
 "#(((:TYPE UNKNOWN-TYPE) (:TYPE HAIRY-TYPE)) ((:TYPE NEGATION-TYPE)) ((:TYPE UNION-TYPE)) ((:TYPE INTERSECTION-TYPE)) ((:TYPE MEMBER-TYPE)) ((:TYPE VALUES-TYPE) (:TYPE FUN-TYPE) (:TYPE FUN-DESIGNATOR-TYPE) (:TYPE ARGS-TYPE)) ((:TYPE NUMERIC-TYPE)) ((:TYPE UNDEFINED-CLASSOID) (:TYPE BUILT-IN-CLASSOID) (:TYPE CONDITION-CLASSOID) (:TYPE STRUCTURE-CLASSOID) (:TYPE STANDARD-CLASSOID) (:TYPE STATIC-CLASSOID) (:TYPE CLASSOID)) ((:TYPE ARRAY-TYPE)) ((:TYPE CONS-TYPE)) ((:TYPE CHARACTER-SET-TYPE)))"
 "((let ((tab #a((16) (unsigned-byte 8) 0 21 15 7 1 13 13 0 0 0 16 31 3 17 30 0)))
  (let ((b (& (>> val 1) #xf)))
   (let ((a (>> (<< val 7) 28)))
    (^ a (aref tab b))))))")
(#(10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 82FDFC4E 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2
   CD22F006 FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 12 8 13 12 7 0 3)))
  (let ((b (& (>> val 11) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(70CB34EE 82FDFC4E A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (^ (>> val 1) (>> val 10)) 7))")
(#(47ED28C7 7980B71D 82FDFC4E A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 12) (>> val 30)) 7))")
(#(42F9EC4F 52ECC4FA 53C6AF8C 546D436A 82FDFC4E D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (+ (>> val 3) (>> val 9) (>> val 16)) 7))")
(#(3D6EC19 326CF299 3A1DA026 82FDFC4E 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 0 2 0 11 8 0 5 0)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2 10ACE44E 2CFE05E6 3539E037 372E43BC 652FED0C 7C31AE8F 7C678985 965CD62A A0FAB3A5 B64902BB B6EC8FEB C8A25DB2 CD22F006
   FF5C21D6)
 "(NIL COMPLEX INTEGER MOD SINGLE-FLOAT DOUBLE-FLOAT SIGNED-BYTE UNSIGNED-BYTE FIXNUM BIT EXTENDED-CHAR CHARACTER STANDARD-CHAR BASE-CHAR T)"
 "((let ((tab #a((8) (unsigned-byte 8) 13 2 0 5 12 0 5 14)))
  (let ((b (& (>> val 19) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(2 70CB34EE A74C4D40 E29480A8 FF414202)
 "(SIMPLE-VECTOR VECTOR CONS LIST NIL)"
 "(  (& (- (>> val 6) (>> val 7)) 7))")
(#(2 47ED28C7 7980B71D A4323F41 AE780BE9 C8A25DB2)
 "(NIL EXTENDED-SEQUENCE FUNCALLABLE-INSTANCE INSTANCE * T)"
 "(  (& (+ (>> val 1) (>> val 22)) 7))")
(#(2 42F9EC4F 52ECC4FA 53C6AF8C 546D436A D9F0FE17 E77DD8CF)
 "(:APPEND :SUPERSEDE :RENAME-AND-DELETE :RENAME NIL :ERROR :NEW-VERSION)"
 "(  (& (^ (>> val 4) (>> val 13)) 7))")
(#(2 3D6EC19 326CF299 3A1DA026 8CD5B89F 92586CF4 A048B3D2 B7DA6CE4 EB29C836 F987A176)
 "(SB-WALKER::CALL LAMBDA SET NIL QUOTE RETURN SB-WALKER::EFFECT SB-WALKER::TEST FUNCTION EVAL)"
 "((let ((tab #a((8) (unsigned-byte 8) 8 2 0 0 4 0 5 13)))
  (let ((b (& (>> val 2) #x7)))
   (let ((a (>> (<< val 5) 29)))
    (^ a (aref tab b))))))")
(#(CD31CAB 7E4DD5CC 81CDF6F7 8DC2A923 A87D60AD)
 "(:ALLOW-OTHER-KEYS :SYSTEMP :OVERFLOW :STACK-ALLOCATE-P :FLAG-TN)"
 "(  (& (+ (>> val 2) (>> val 12)) 7))")
)
;; EOF
